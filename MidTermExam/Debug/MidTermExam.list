
MidTermExam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b28  08002b28  00012b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b48  08002b48  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002b48  08002b48  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b48  08002b48  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b48  08002b48  00012b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b4c  08002b4c  00012b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000040  08002b90  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002b90  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009163  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abd  00000000  00000000  000291cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e6c  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c19c  00000000  00000000  00042e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008207e  00000000  00000000  0004f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002828  00000000  00000000  000d10ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b10 	.word	0x08002b10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002b10 	.word	0x08002b10

0800014c <isButton_RESET_Pressed>:
int button_INC_LongPressed_flag = 0;
int button_DEC_LongPressed_flag = 0;


int isButton_RESET_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_RESET_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_RESET_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_RESET_Pressed+0x16>
	{
		button_RESET_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_RESET_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_RESET_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000005c 	.word	0x2000005c

08000170 <isButton_INC_Pressed>:
int isButton_INC_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_INC_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_INC_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_INC_Pressed+0x16>
	{
		button_INC_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_INC_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_INC_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000060 	.word	0x20000060

08000194 <isButton_DEC_Pressed>:
int isButton_DEC_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_DEC_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_DEC_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_DEC_Pressed+0x16>
	{
		button_DEC_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_DEC_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_DEC_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000064 	.word	0x20000064

080001b8 <isButton_INC_LongPressed>:
		button_RESET_LongPressed_flag = 0;
		return 1;
	}
	else return 0;
}
int isButton_INC_LongPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_INC_LongPressed_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_INC_LongPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_INC_LongPressed+0x16>
		button_INC_LongPressed_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_INC_LongPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_INC_LongPressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	2000006c 	.word	0x2000006c

080001dc <isButton_DEC_LongPressed>:
int isButton_DEC_LongPressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button_DEC_LongPressed_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isButton_DEC_LongPressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isButton_DEC_LongPressed+0x16>
		button_DEC_LongPressed_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isButton_DEC_LongPressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isButton_DEC_LongPressed+0x18>
	}
	else return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000070 	.word	0x20000070

08000200 <getKeyInput>:

void getKeyInput()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e134      	b.n	8000476 <getKeyInput+0x276>
		keyReg0[i] = keyReg1[i];
 800020c:	4a9e      	ldr	r2, [pc, #632]	; (8000488 <getKeyInput+0x288>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	499d      	ldr	r1, [pc, #628]	; (800048c <getKeyInput+0x28c>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 800021c:	4a9c      	ldr	r2, [pc, #624]	; (8000490 <getKeyInput+0x290>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	4998      	ldr	r1, [pc, #608]	; (8000488 <getKeyInput+0x288>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d152      	bne.n	80002d8 <getKeyInput+0xd8>
			keyReg2[i] = HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin);
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	4897      	ldr	r0, [pc, #604]	; (8000494 <getKeyInput+0x294>)
 8000238:	f001 fc2a 	bl	8001a90 <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	4619      	mov	r1, r3
 8000240:	4a93      	ldr	r2, [pc, #588]	; (8000490 <getKeyInput+0x290>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000248:	4a90      	ldr	r2, [pc, #576]	; (800048c <getKeyInput+0x28c>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	498d      	ldr	r1, [pc, #564]	; (8000488 <getKeyInput+0x288>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d13d      	bne.n	80002d8 <getKeyInput+0xd8>
 800025c:	4a8a      	ldr	r2, [pc, #552]	; (8000488 <getKeyInput+0x288>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	498a      	ldr	r1, [pc, #552]	; (8000490 <getKeyInput+0x290>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d133      	bne.n	80002d8 <getKeyInput+0xd8>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 8000270:	4a89      	ldr	r2, [pc, #548]	; (8000498 <getKeyInput+0x298>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4985      	ldr	r1, [pc, #532]	; (8000490 <getKeyInput+0x290>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d014      	beq.n	80002ae <getKeyInput+0xae>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 8000284:	4a82      	ldr	r2, [pc, #520]	; (8000490 <getKeyInput+0x290>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4982      	ldr	r1, [pc, #520]	; (8000498 <getKeyInput+0x298>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000294:	4a7e      	ldr	r2, [pc, #504]	; (8000490 <getKeyInput+0x290>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11b      	bne.n	80002d8 <getKeyInput+0xd8>
					{
						//TODO
						button_RESET_flag = 1;
 80002a0:	4b7e      	ldr	r3, [pc, #504]	; (800049c <getKeyInput+0x29c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 80002a6:	4b7e      	ldr	r3, [pc, #504]	; (80004a0 <getKeyInput+0x2a0>)
 80002a8:	22c8      	movs	r2, #200	; 0xc8
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	e014      	b.n	80002d8 <getKeyInput+0xd8>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 80002ae:	4a78      	ldr	r2, [pc, #480]	; (8000490 <getKeyInput+0x290>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d10e      	bne.n	80002d8 <getKeyInput+0xd8>
						timerForKeyPress--;
 80002ba:	4b79      	ldr	r3, [pc, #484]	; (80004a0 <getKeyInput+0x2a0>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	3b01      	subs	r3, #1
 80002c0:	4a77      	ldr	r2, [pc, #476]	; (80004a0 <getKeyInput+0x2a0>)
 80002c2:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002c4:	4b76      	ldr	r3, [pc, #472]	; (80004a0 <getKeyInput+0x2a0>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d105      	bne.n	80002d8 <getKeyInput+0xd8>
						{
							//if(keyReg2 == PRESSED_STATE)
							//{
								//TODO
								button_RESET_LongPressed_flag = 1;
 80002cc:	4b75      	ldr	r3, [pc, #468]	; (80004a4 <getKeyInput+0x2a4>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	601a      	str	r2, [r3, #0]
							//}
							timerForKeyPress = 200;
 80002d2:	4b73      	ldr	r3, [pc, #460]	; (80004a0 <getKeyInput+0x2a0>)
 80002d4:	22c8      	movs	r2, #200	; 0xc8
 80002d6:	601a      	str	r2, [r3, #0]

				}

			}
		}
		if(i == 1){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d162      	bne.n	80003a4 <getKeyInput+0x1a4>
			keyReg0[i] = keyReg1[i];
 80002de:	4a6a      	ldr	r2, [pc, #424]	; (8000488 <getKeyInput+0x288>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002e6:	4969      	ldr	r1, [pc, #420]	; (800048c <getKeyInput+0x28c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg1[i] = keyReg2[i];
 80002ee:	4a68      	ldr	r2, [pc, #416]	; (8000490 <getKeyInput+0x290>)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	4964      	ldr	r1, [pc, #400]	; (8000488 <getKeyInput+0x288>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 80002fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000302:	4864      	ldr	r0, [pc, #400]	; (8000494 <getKeyInput+0x294>)
 8000304:	f001 fbc4 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000308:	4603      	mov	r3, r0
 800030a:	4619      	mov	r1, r3
 800030c:	4a60      	ldr	r2, [pc, #384]	; (8000490 <getKeyInput+0x290>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000314:	4a5d      	ldr	r2, [pc, #372]	; (800048c <getKeyInput+0x28c>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031c:	495a      	ldr	r1, [pc, #360]	; (8000488 <getKeyInput+0x288>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000324:	429a      	cmp	r2, r3
 8000326:	d13d      	bne.n	80003a4 <getKeyInput+0x1a4>
 8000328:	4a57      	ldr	r2, [pc, #348]	; (8000488 <getKeyInput+0x288>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000330:	4957      	ldr	r1, [pc, #348]	; (8000490 <getKeyInput+0x290>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000338:	429a      	cmp	r2, r3
 800033a:	d133      	bne.n	80003a4 <getKeyInput+0x1a4>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 800033c:	4a56      	ldr	r2, [pc, #344]	; (8000498 <getKeyInput+0x298>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000344:	4952      	ldr	r1, [pc, #328]	; (8000490 <getKeyInput+0x290>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800034c:	429a      	cmp	r2, r3
 800034e:	d014      	beq.n	800037a <getKeyInput+0x17a>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 8000350:	4a4f      	ldr	r2, [pc, #316]	; (8000490 <getKeyInput+0x290>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000358:	494f      	ldr	r1, [pc, #316]	; (8000498 <getKeyInput+0x298>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000360:	4a4b      	ldr	r2, [pc, #300]	; (8000490 <getKeyInput+0x290>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d11b      	bne.n	80003a4 <getKeyInput+0x1a4>
					{
						//TODO
						button_INC_flag = 1;
 800036c:	4b4e      	ldr	r3, [pc, #312]	; (80004a8 <getKeyInput+0x2a8>)
 800036e:	2201      	movs	r2, #1
 8000370:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 8000372:	4b4b      	ldr	r3, [pc, #300]	; (80004a0 <getKeyInput+0x2a0>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	e014      	b.n	80003a4 <getKeyInput+0x1a4>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 800037a:	4a45      	ldr	r2, [pc, #276]	; (8000490 <getKeyInput+0x290>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d10e      	bne.n	80003a4 <getKeyInput+0x1a4>
						timerForKeyPress--;
 8000386:	4b46      	ldr	r3, [pc, #280]	; (80004a0 <getKeyInput+0x2a0>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	3b01      	subs	r3, #1
 800038c:	4a44      	ldr	r2, [pc, #272]	; (80004a0 <getKeyInput+0x2a0>)
 800038e:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000390:	4b43      	ldr	r3, [pc, #268]	; (80004a0 <getKeyInput+0x2a0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d105      	bne.n	80003a4 <getKeyInput+0x1a4>
						{
							//if(keyReg2 == PRESSED_STATE)
							//{
								//TODO
								button_INC_LongPressed_flag = 1;
 8000398:	4b44      	ldr	r3, [pc, #272]	; (80004ac <getKeyInput+0x2ac>)
 800039a:	2201      	movs	r2, #1
 800039c:	601a      	str	r2, [r3, #0]
							//}
							timerForKeyPress = 200;
 800039e:	4b40      	ldr	r3, [pc, #256]	; (80004a0 <getKeyInput+0x2a0>)
 80003a0:	22c8      	movs	r2, #200	; 0xc8
 80003a2:	601a      	str	r2, [r3, #0]

				}

			}
		}
		if(i == 2){
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d162      	bne.n	8000470 <getKeyInput+0x270>
			keyReg0[i] = keyReg1[i];
 80003aa:	4a37      	ldr	r2, [pc, #220]	; (8000488 <getKeyInput+0x288>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b2:	4936      	ldr	r1, [pc, #216]	; (800048c <getKeyInput+0x28c>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg1[i] = keyReg2[i];
 80003ba:	4a35      	ldr	r2, [pc, #212]	; (8000490 <getKeyInput+0x290>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c2:	4931      	ldr	r1, [pc, #196]	; (8000488 <getKeyInput+0x288>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg2[i] = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 80003ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ce:	4831      	ldr	r0, [pc, #196]	; (8000494 <getKeyInput+0x294>)
 80003d0:	f001 fb5e 	bl	8001a90 <HAL_GPIO_ReadPin>
 80003d4:	4603      	mov	r3, r0
 80003d6:	4619      	mov	r1, r3
 80003d8:	4a2d      	ldr	r2, [pc, #180]	; (8000490 <getKeyInput+0x290>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80003e0:	4a2a      	ldr	r2, [pc, #168]	; (800048c <getKeyInput+0x28c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003e8:	4927      	ldr	r1, [pc, #156]	; (8000488 <getKeyInput+0x288>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	d13d      	bne.n	8000470 <getKeyInput+0x270>
 80003f4:	4a24      	ldr	r2, [pc, #144]	; (8000488 <getKeyInput+0x288>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003fc:	4924      	ldr	r1, [pc, #144]	; (8000490 <getKeyInput+0x290>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000404:	429a      	cmp	r2, r3
 8000406:	d133      	bne.n	8000470 <getKeyInput+0x270>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 8000408:	4a23      	ldr	r2, [pc, #140]	; (8000498 <getKeyInput+0x298>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000410:	491f      	ldr	r1, [pc, #124]	; (8000490 <getKeyInput+0x290>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000418:	429a      	cmp	r2, r3
 800041a:	d014      	beq.n	8000446 <getKeyInput+0x246>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 800041c:	4a1c      	ldr	r2, [pc, #112]	; (8000490 <getKeyInput+0x290>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000424:	491c      	ldr	r1, [pc, #112]	; (8000498 <getKeyInput+0x298>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 800042c:	4a18      	ldr	r2, [pc, #96]	; (8000490 <getKeyInput+0x290>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d11b      	bne.n	8000470 <getKeyInput+0x270>
					{
						//TODO
						button_DEC_flag = 1;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <getKeyInput+0x2b0>)
 800043a:	2201      	movs	r2, #1
 800043c:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 200;
 800043e:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <getKeyInput+0x2a0>)
 8000440:	22c8      	movs	r2, #200	; 0xc8
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e014      	b.n	8000470 <getKeyInput+0x270>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <getKeyInput+0x290>)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d10e      	bne.n	8000470 <getKeyInput+0x270>
						timerForKeyPress--;
 8000452:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <getKeyInput+0x2a0>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3b01      	subs	r3, #1
 8000458:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <getKeyInput+0x2a0>)
 800045a:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <getKeyInput+0x2a0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d105      	bne.n	8000470 <getKeyInput+0x270>
						{
							//if(keyReg2 == PRESSED_STATE)
							//{
								//TODO
								button_DEC_LongPressed_flag = 1;
 8000464:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <getKeyInput+0x2b4>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
							//}
							timerForKeyPress = 200;
 800046a:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <getKeyInput+0x2a0>)
 800046c:	22c8      	movs	r2, #200	; 0xc8
 800046e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3301      	adds	r3, #1
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b02      	cmp	r3, #2
 800047a:	f77f aec7 	ble.w	800020c <getKeyInput+0xc>
				}
			}
		}

	}
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000000c 	.word	0x2000000c
 800048c:	20000000 	.word	0x20000000
 8000490:	20000018 	.word	0x20000018
 8000494:	40010800 	.word	0x40010800
 8000498:	20000024 	.word	0x20000024
 800049c:	2000005c 	.word	0x2000005c
 80004a0:	20000030 	.word	0x20000030
 80004a4:	20000068 	.word	0x20000068
 80004a8:	20000060 	.word	0x20000060
 80004ac:	2000006c 	.word	0x2000006c
 80004b0:	20000064 	.word	0x20000064
 80004b4:	20000070 	.word	0x20000070

080004b8 <display7SEG>:

#include <control_led_7SEG.h>
#include "main.h"


void display7SEG(int num){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if(num == 0)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d122      	bne.n	800050c <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2101      	movs	r1, #1
 80004ca:	48bd      	ldr	r0, [pc, #756]	; (80007c0 <display7SEG+0x308>)
 80004cc:	f001 faf7 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2102      	movs	r1, #2
 80004d4:	48ba      	ldr	r0, [pc, #744]	; (80007c0 <display7SEG+0x308>)
 80004d6:	f001 faf2 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2104      	movs	r1, #4
 80004de:	48b8      	ldr	r0, [pc, #736]	; (80007c0 <display7SEG+0x308>)
 80004e0:	f001 faed 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2108      	movs	r1, #8
 80004e8:	48b5      	ldr	r0, [pc, #724]	; (80007c0 <display7SEG+0x308>)
 80004ea:	f001 fae8 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	48b3      	ldr	r0, [pc, #716]	; (80007c0 <display7SEG+0x308>)
 80004f4:	f001 fae3 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2120      	movs	r1, #32
 80004fc:	48b0      	ldr	r0, [pc, #704]	; (80007c0 <display7SEG+0x308>)
 80004fe:	f001 fade 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	48ae      	ldr	r0, [pc, #696]	; (80007c0 <display7SEG+0x308>)
 8000508:	f001 fad9 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d122      	bne.n	8000558 <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2101      	movs	r1, #1
 8000516:	48aa      	ldr	r0, [pc, #680]	; (80007c0 <display7SEG+0x308>)
 8000518:	f001 fad1 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	48a7      	ldr	r0, [pc, #668]	; (80007c0 <display7SEG+0x308>)
 8000522:	f001 facc 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2104      	movs	r1, #4
 800052a:	48a5      	ldr	r0, [pc, #660]	; (80007c0 <display7SEG+0x308>)
 800052c:	f001 fac7 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	48a2      	ldr	r0, [pc, #648]	; (80007c0 <display7SEG+0x308>)
 8000536:	f001 fac2 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2110      	movs	r1, #16
 800053e:	48a0      	ldr	r0, [pc, #640]	; (80007c0 <display7SEG+0x308>)
 8000540:	f001 fabd 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	489d      	ldr	r0, [pc, #628]	; (80007c0 <display7SEG+0x308>)
 800054a:	f001 fab8 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	489b      	ldr	r0, [pc, #620]	; (80007c0 <display7SEG+0x308>)
 8000554:	f001 fab3 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d122      	bne.n	80005a4 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4897      	ldr	r0, [pc, #604]	; (80007c0 <display7SEG+0x308>)
 8000564:	f001 faab 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2102      	movs	r1, #2
 800056c:	4894      	ldr	r0, [pc, #592]	; (80007c0 <display7SEG+0x308>)
 800056e:	f001 faa6 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2104      	movs	r1, #4
 8000576:	4892      	ldr	r0, [pc, #584]	; (80007c0 <display7SEG+0x308>)
 8000578:	f001 faa1 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	2108      	movs	r1, #8
 8000580:	488f      	ldr	r0, [pc, #572]	; (80007c0 <display7SEG+0x308>)
 8000582:	f001 fa9c 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2110      	movs	r1, #16
 800058a:	488d      	ldr	r0, [pc, #564]	; (80007c0 <display7SEG+0x308>)
 800058c:	f001 fa97 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2120      	movs	r1, #32
 8000594:	488a      	ldr	r0, [pc, #552]	; (80007c0 <display7SEG+0x308>)
 8000596:	f001 fa92 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	; 0x40
 800059e:	4888      	ldr	r0, [pc, #544]	; (80007c0 <display7SEG+0x308>)
 80005a0:	f001 fa8d 	bl	8001abe <HAL_GPIO_WritePin>

	}
	if(num == 3)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d122      	bne.n	80005f0 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2101      	movs	r1, #1
 80005ae:	4884      	ldr	r0, [pc, #528]	; (80007c0 <display7SEG+0x308>)
 80005b0:	f001 fa85 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2102      	movs	r1, #2
 80005b8:	4881      	ldr	r0, [pc, #516]	; (80007c0 <display7SEG+0x308>)
 80005ba:	f001 fa80 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2104      	movs	r1, #4
 80005c2:	487f      	ldr	r0, [pc, #508]	; (80007c0 <display7SEG+0x308>)
 80005c4:	f001 fa7b 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2108      	movs	r1, #8
 80005cc:	487c      	ldr	r0, [pc, #496]	; (80007c0 <display7SEG+0x308>)
 80005ce:	f001 fa76 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2110      	movs	r1, #16
 80005d6:	487a      	ldr	r0, [pc, #488]	; (80007c0 <display7SEG+0x308>)
 80005d8:	f001 fa71 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	4877      	ldr	r0, [pc, #476]	; (80007c0 <display7SEG+0x308>)
 80005e2:	f001 fa6c 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	4875      	ldr	r0, [pc, #468]	; (80007c0 <display7SEG+0x308>)
 80005ec:	f001 fa67 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 4)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d122      	bne.n	800063c <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2101      	movs	r1, #1
 80005fa:	4871      	ldr	r0, [pc, #452]	; (80007c0 <display7SEG+0x308>)
 80005fc:	f001 fa5f 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2102      	movs	r1, #2
 8000604:	486e      	ldr	r0, [pc, #440]	; (80007c0 <display7SEG+0x308>)
 8000606:	f001 fa5a 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2104      	movs	r1, #4
 800060e:	486c      	ldr	r0, [pc, #432]	; (80007c0 <display7SEG+0x308>)
 8000610:	f001 fa55 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	4869      	ldr	r0, [pc, #420]	; (80007c0 <display7SEG+0x308>)
 800061a:	f001 fa50 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2110      	movs	r1, #16
 8000622:	4867      	ldr	r0, [pc, #412]	; (80007c0 <display7SEG+0x308>)
 8000624:	f001 fa4b 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2120      	movs	r1, #32
 800062c:	4864      	ldr	r0, [pc, #400]	; (80007c0 <display7SEG+0x308>)
 800062e:	f001 fa46 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	4862      	ldr	r0, [pc, #392]	; (80007c0 <display7SEG+0x308>)
 8000638:	f001 fa41 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 5)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b05      	cmp	r3, #5
 8000640:	d122      	bne.n	8000688 <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	485e      	ldr	r0, [pc, #376]	; (80007c0 <display7SEG+0x308>)
 8000648:	f001 fa39 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2102      	movs	r1, #2
 8000650:	485b      	ldr	r0, [pc, #364]	; (80007c0 <display7SEG+0x308>)
 8000652:	f001 fa34 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2104      	movs	r1, #4
 800065a:	4859      	ldr	r0, [pc, #356]	; (80007c0 <display7SEG+0x308>)
 800065c:	f001 fa2f 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2108      	movs	r1, #8
 8000664:	4856      	ldr	r0, [pc, #344]	; (80007c0 <display7SEG+0x308>)
 8000666:	f001 fa2a 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2110      	movs	r1, #16
 800066e:	4854      	ldr	r0, [pc, #336]	; (80007c0 <display7SEG+0x308>)
 8000670:	f001 fa25 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	2120      	movs	r1, #32
 8000678:	4851      	ldr	r0, [pc, #324]	; (80007c0 <display7SEG+0x308>)
 800067a:	f001 fa20 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	484f      	ldr	r0, [pc, #316]	; (80007c0 <display7SEG+0x308>)
 8000684:	f001 fa1b 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b06      	cmp	r3, #6
 800068c:	d122      	bne.n	80006d4 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2101      	movs	r1, #1
 8000692:	484b      	ldr	r0, [pc, #300]	; (80007c0 <display7SEG+0x308>)
 8000694:	f001 fa13 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2102      	movs	r1, #2
 800069c:	4848      	ldr	r0, [pc, #288]	; (80007c0 <display7SEG+0x308>)
 800069e:	f001 fa0e 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2104      	movs	r1, #4
 80006a6:	4846      	ldr	r0, [pc, #280]	; (80007c0 <display7SEG+0x308>)
 80006a8:	f001 fa09 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2108      	movs	r1, #8
 80006b0:	4843      	ldr	r0, [pc, #268]	; (80007c0 <display7SEG+0x308>)
 80006b2:	f001 fa04 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2110      	movs	r1, #16
 80006ba:	4841      	ldr	r0, [pc, #260]	; (80007c0 <display7SEG+0x308>)
 80006bc:	f001 f9ff 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	483e      	ldr	r0, [pc, #248]	; (80007c0 <display7SEG+0x308>)
 80006c6:	f001 f9fa 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	483c      	ldr	r0, [pc, #240]	; (80007c0 <display7SEG+0x308>)
 80006d0:	f001 f9f5 	bl	8001abe <HAL_GPIO_WritePin>

	}
	if(num == 7)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b07      	cmp	r3, #7
 80006d8:	d122      	bne.n	8000720 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	4838      	ldr	r0, [pc, #224]	; (80007c0 <display7SEG+0x308>)
 80006e0:	f001 f9ed 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2102      	movs	r1, #2
 80006e8:	4835      	ldr	r0, [pc, #212]	; (80007c0 <display7SEG+0x308>)
 80006ea:	f001 f9e8 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2104      	movs	r1, #4
 80006f2:	4833      	ldr	r0, [pc, #204]	; (80007c0 <display7SEG+0x308>)
 80006f4:	f001 f9e3 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2108      	movs	r1, #8
 80006fc:	4830      	ldr	r0, [pc, #192]	; (80007c0 <display7SEG+0x308>)
 80006fe:	f001 f9de 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	2110      	movs	r1, #16
 8000706:	482e      	ldr	r0, [pc, #184]	; (80007c0 <display7SEG+0x308>)
 8000708:	f001 f9d9 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2120      	movs	r1, #32
 8000710:	482b      	ldr	r0, [pc, #172]	; (80007c0 <display7SEG+0x308>)
 8000712:	f001 f9d4 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	2140      	movs	r1, #64	; 0x40
 800071a:	4829      	ldr	r0, [pc, #164]	; (80007c0 <display7SEG+0x308>)
 800071c:	f001 f9cf 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 8)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b08      	cmp	r3, #8
 8000724:	d122      	bne.n	800076c <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	4825      	ldr	r0, [pc, #148]	; (80007c0 <display7SEG+0x308>)
 800072c:	f001 f9c7 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2102      	movs	r1, #2
 8000734:	4822      	ldr	r0, [pc, #136]	; (80007c0 <display7SEG+0x308>)
 8000736:	f001 f9c2 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2104      	movs	r1, #4
 800073e:	4820      	ldr	r0, [pc, #128]	; (80007c0 <display7SEG+0x308>)
 8000740:	f001 f9bd 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2108      	movs	r1, #8
 8000748:	481d      	ldr	r0, [pc, #116]	; (80007c0 <display7SEG+0x308>)
 800074a:	f001 f9b8 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2110      	movs	r1, #16
 8000752:	481b      	ldr	r0, [pc, #108]	; (80007c0 <display7SEG+0x308>)
 8000754:	f001 f9b3 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	2120      	movs	r1, #32
 800075c:	4818      	ldr	r0, [pc, #96]	; (80007c0 <display7SEG+0x308>)
 800075e:	f001 f9ae 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4816      	ldr	r0, [pc, #88]	; (80007c0 <display7SEG+0x308>)
 8000768:	f001 f9a9 	bl	8001abe <HAL_GPIO_WritePin>
	}
	if(num == 9)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b09      	cmp	r3, #9
 8000770:	d122      	bne.n	80007b8 <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2101      	movs	r1, #1
 8000776:	4812      	ldr	r0, [pc, #72]	; (80007c0 <display7SEG+0x308>)
 8000778:	f001 f9a1 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <display7SEG+0x308>)
 8000782:	f001 f99c 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2104      	movs	r1, #4
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <display7SEG+0x308>)
 800078c:	f001 f997 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2108      	movs	r1, #8
 8000794:	480a      	ldr	r0, [pc, #40]	; (80007c0 <display7SEG+0x308>)
 8000796:	f001 f992 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2110      	movs	r1, #16
 800079e:	4808      	ldr	r0, [pc, #32]	; (80007c0 <display7SEG+0x308>)
 80007a0:	f001 f98d 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2120      	movs	r1, #32
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <display7SEG+0x308>)
 80007aa:	f001 f988 	bl	8001abe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <display7SEG+0x308>)
 80007b4:	f001 f983 	bl	8001abe <HAL_GPIO_WritePin>
	}
}
 80007b8:	bf00      	nop
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40010c00 	.word	0x40010c00

080007c4 <fsm_count_down_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"

void fsm_count_down_run(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	switch(status){
 80007c8:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <fsm_count_down_run+0x170>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b0c      	cmp	r3, #12
 80007ce:	f040 80ac 	bne.w	800092a <fsm_count_down_run+0x166>
		case COUNT_DOWN:
			if(counter != 0){
 80007d2:	4b59      	ldr	r3, [pc, #356]	; (8000938 <fsm_count_down_run+0x174>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d011      	beq.n	80007fe <fsm_count_down_run+0x3a>
				if(timer3_flag == 1){
 80007da:	4b58      	ldr	r3, [pc, #352]	; (800093c <fsm_count_down_run+0x178>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10d      	bne.n	80007fe <fsm_count_down_run+0x3a>
					counter--;
 80007e2:	4b55      	ldr	r3, [pc, #340]	; (8000938 <fsm_count_down_run+0x174>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	4a53      	ldr	r2, [pc, #332]	; (8000938 <fsm_count_down_run+0x174>)
 80007ea:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 80007ec:	4b52      	ldr	r3, [pc, #328]	; (8000938 <fsm_count_down_run+0x174>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe61 	bl	80004b8 <display7SEG>
					setTimer3(1000);
 80007f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fa:	f000 fd4d 	bl	8001298 <setTimer3>
				}
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 80007fe:	f7ff fca5 	bl	800014c <isButton_RESET_Pressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b01      	cmp	r3, #1
 8000806:	d106      	bne.n	8000816 <fsm_count_down_run+0x52>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000808:	f242 7010 	movw	r0, #10000	; 0x2710
 800080c:	f000 fd44 	bl	8001298 <setTimer3>
				status = reset;
 8000810:	4b48      	ldr	r3, [pc, #288]	; (8000934 <fsm_count_down_run+0x170>)
 8000812:	2201      	movs	r2, #1
 8000814:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000816:	f7ff fcbd 	bl	8000194 <isButton_DEC_Pressed>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d118      	bne.n	8000852 <fsm_count_down_run+0x8e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000820:	f242 7010 	movw	r0, #10000	; 0x2710
 8000824:	f000 fd38 	bl	8001298 <setTimer3>
				if(counter == 1){
 8000828:	4b43      	ldr	r3, [pc, #268]	; (8000938 <fsm_count_down_run+0x174>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d103      	bne.n	8000838 <fsm_count_down_run+0x74>
					status = reset;
 8000830:	4b40      	ldr	r3, [pc, #256]	; (8000934 <fsm_count_down_run+0x170>)
 8000832:	2201      	movs	r2, #1
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	e00c      	b.n	8000852 <fsm_count_down_run+0x8e>
				}
				else{
					counter --;
 8000838:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <fsm_count_down_run+0x174>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3b01      	subs	r3, #1
 800083e:	4a3e      	ldr	r2, [pc, #248]	; (8000938 <fsm_count_down_run+0x174>)
 8000840:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <fsm_count_down_run+0x174>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe36 	bl	80004b8 <display7SEG>
					status = DECREASE;
 800084c:	4b39      	ldr	r3, [pc, #228]	; (8000934 <fsm_count_down_run+0x170>)
 800084e:	2203      	movs	r2, #3
 8000850:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 8000852:	f7ff fc8d 	bl	8000170 <isButton_INC_Pressed>
 8000856:	4603      	mov	r3, r0
 8000858:	2b01      	cmp	r3, #1
 800085a:	d120      	bne.n	800089e <fsm_count_down_run+0xda>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 800085c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000860:	f000 fd1a 	bl	8001298 <setTimer3>
				if(counter == 8){
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <fsm_count_down_run+0x174>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b08      	cmp	r3, #8
 800086a:	d10b      	bne.n	8000884 <fsm_count_down_run+0xc0>
					counter = 9;
 800086c:	4b32      	ldr	r3, [pc, #200]	; (8000938 <fsm_count_down_run+0x174>)
 800086e:	2209      	movs	r2, #9
 8000870:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <fsm_count_down_run+0x174>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe1e 	bl	80004b8 <display7SEG>
					status = VALUE_MAX;
 800087c:	4b2d      	ldr	r3, [pc, #180]	; (8000934 <fsm_count_down_run+0x170>)
 800087e:	2204      	movs	r2, #4
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	e00c      	b.n	800089e <fsm_count_down_run+0xda>
				}
				else{
					counter ++;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <fsm_count_down_run+0x174>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <fsm_count_down_run+0x174>)
 800088c:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 800088e:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <fsm_count_down_run+0x174>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe10 	bl	80004b8 <display7SEG>
					status = INCREASE;
 8000898:	4b26      	ldr	r3, [pc, #152]	; (8000934 <fsm_count_down_run+0x170>)
 800089a:	2202      	movs	r2, #2
 800089c:	601a      	str	r2, [r3, #0]
				}
			}


			// chuyển về trạng thái nhấn đè
			if(isButton_INC_LongPressed() == 1){
 800089e:	f7ff fc8b 	bl	80001b8 <isButton_INC_LongPressed>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d11c      	bne.n	80008e2 <fsm_count_down_run+0x11e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80008a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80008ac:	f000 fcf4 	bl	8001298 <setTimer3>
				if(timer2_flag == 1){
 80008b0:	4b23      	ldr	r3, [pc, #140]	; (8000940 <fsm_count_down_run+0x17c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d114      	bne.n	80008e2 <fsm_count_down_run+0x11e>
					counter++;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <fsm_count_down_run+0x174>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	3301      	adds	r3, #1
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <fsm_count_down_run+0x174>)
 80008c0:	6013      	str	r3, [r2, #0]
					if (counter == 10) counter = 0;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <fsm_count_down_run+0x174>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b0a      	cmp	r3, #10
 80008c8:	d102      	bne.n	80008d0 <fsm_count_down_run+0x10c>
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <fsm_count_down_run+0x174>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 80008d0:	4b19      	ldr	r3, [pc, #100]	; (8000938 <fsm_count_down_run+0x174>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fdef 	bl	80004b8 <display7SEG>
					setTimer2(1000);
 80008da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008de:	f000 fcbf 	bl	8001260 <setTimer2>
				}
			}
			if(isButton_DEC_LongPressed() == 1){
 80008e2:	f7ff fc7b 	bl	80001dc <isButton_DEC_LongPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d120      	bne.n	800092e <fsm_count_down_run+0x16a>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80008ec:	f242 7010 	movw	r0, #10000	; 0x2710
 80008f0:	f000 fcd2 	bl	8001298 <setTimer3>
				if(timer2_flag == 1){
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <fsm_count_down_run+0x17c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d118      	bne.n	800092e <fsm_count_down_run+0x16a>
					counter--;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <fsm_count_down_run+0x174>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3b01      	subs	r3, #1
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <fsm_count_down_run+0x174>)
 8000904:	6013      	str	r3, [r2, #0]
					if(counter == -1) counter = 9;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <fsm_count_down_run+0x174>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090e:	d102      	bne.n	8000916 <fsm_count_down_run+0x152>
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <fsm_count_down_run+0x174>)
 8000912:	2209      	movs	r2, #9
 8000914:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <fsm_count_down_run+0x174>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fdcc 	bl	80004b8 <display7SEG>
					setTimer2(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000924:	f000 fc9c 	bl	8001260 <setTimer2>
				}
			}
			break;
 8000928:	e001      	b.n	800092e <fsm_count_down_run+0x16a>
		default:
			break;
 800092a:	bf00      	nop
 800092c:	e000      	b.n	8000930 <fsm_count_down_run+0x16c>
			break;
 800092e:	bf00      	nop
	}
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000074 	.word	0x20000074
 8000938:	20000078 	.word	0x20000078
 800093c:	20000090 	.word	0x20000090
 8000940:	20000088 	.word	0x20000088

08000944 <fsm_long_press_run>:
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"


void fsm_long_press_run(){
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	switch(status){
 8000948:	4ba8      	ldr	r3, [pc, #672]	; (8000bec <fsm_long_press_run+0x2a8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b0a      	cmp	r3, #10
 800094e:	f000 80a5 	beq.w	8000a9c <fsm_long_press_run+0x158>
 8000952:	2b0b      	cmp	r3, #11
 8000954:	f040 8147 	bne.w	8000be6 <fsm_long_press_run+0x2a2>
		case LONG_INC:
			display7SEG(counter);
 8000958:	4ba5      	ldr	r3, [pc, #660]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fdab 	bl	80004b8 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000962:	4ba4      	ldr	r3, [pc, #656]	; (8000bf4 <fsm_long_press_run+0x2b0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d114      	bne.n	8000994 <fsm_long_press_run+0x50>
				setTimer3(1000);
 800096a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096e:	f000 fc93 	bl	8001298 <setTimer3>
				if(counter != 0){
 8000972:	4b9f      	ldr	r3, [pc, #636]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d004      	beq.n	8000984 <fsm_long_press_run+0x40>
					counter--;
 800097a:	4b9d      	ldr	r3, [pc, #628]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3b01      	subs	r3, #1
 8000980:	4a9b      	ldr	r2, [pc, #620]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000982:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000984:	4b9a      	ldr	r3, [pc, #616]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fd95 	bl	80004b8 <display7SEG>
				status = COUNT_DOWN;
 800098e:	4b97      	ldr	r3, [pc, #604]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000990:	220c      	movs	r2, #12
 8000992:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_LongPressed() == 1){
 8000994:	f7ff fc10 	bl	80001b8 <isButton_INC_LongPressed>
 8000998:	4603      	mov	r3, r0
 800099a:	2b01      	cmp	r3, #1
 800099c:	d11c      	bne.n	80009d8 <fsm_long_press_run+0x94>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 800099e:	f242 7010 	movw	r0, #10000	; 0x2710
 80009a2:	f000 fc79 	bl	8001298 <setTimer3>
				if(timer2_flag == 1){
 80009a6:	4b94      	ldr	r3, [pc, #592]	; (8000bf8 <fsm_long_press_run+0x2b4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d114      	bne.n	80009d8 <fsm_long_press_run+0x94>
					counter++;
 80009ae:	4b90      	ldr	r3, [pc, #576]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3301      	adds	r3, #1
 80009b4:	4a8e      	ldr	r2, [pc, #568]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 80009b6:	6013      	str	r3, [r2, #0]
					if (counter == 10) counter = 0;
 80009b8:	4b8d      	ldr	r3, [pc, #564]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d102      	bne.n	80009c6 <fsm_long_press_run+0x82>
 80009c0:	4b8b      	ldr	r3, [pc, #556]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 80009c6:	4b8a      	ldr	r3, [pc, #552]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fd74 	bl	80004b8 <display7SEG>
					setTimer2(1000);
 80009d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d4:	f000 fc44 	bl	8001260 <setTimer2>
				}
			}

			if(isButton_DEC_LongPressed() == 1){
 80009d8:	f7ff fc00 	bl	80001dc <isButton_DEC_LongPressed>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d10a      	bne.n	80009f8 <fsm_long_press_run+0xb4>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80009e2:	f242 7010 	movw	r0, #10000	; 0x2710
 80009e6:	f000 fc57 	bl	8001298 <setTimer3>
				status = LONG_DEC;
 80009ea:	4b80      	ldr	r3, [pc, #512]	; (8000bec <fsm_long_press_run+0x2a8>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 80009f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f4:	f000 fc34 	bl	8001260 <setTimer2>
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 80009f8:	f7ff fba8 	bl	800014c <isButton_RESET_Pressed>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d106      	bne.n	8000a10 <fsm_long_press_run+0xcc>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a02:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a06:	f000 fc47 	bl	8001298 <setTimer3>
				status = reset;
 8000a0a:	4b78      	ldr	r3, [pc, #480]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000a10:	f7ff fbc0 	bl	8000194 <isButton_DEC_Pressed>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d118      	bne.n	8000a4c <fsm_long_press_run+0x108>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a1e:	f000 fc3b 	bl	8001298 <setTimer3>
				if(counter == 1){
 8000a22:	4b73      	ldr	r3, [pc, #460]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d103      	bne.n	8000a32 <fsm_long_press_run+0xee>
					status = reset;
 8000a2a:	4b70      	ldr	r3, [pc, #448]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	e00c      	b.n	8000a4c <fsm_long_press_run+0x108>
				}
				else{
					counter --;
 8000a32:	4b6f      	ldr	r3, [pc, #444]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	4a6d      	ldr	r2, [pc, #436]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a3a:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000a3c:	4b6c      	ldr	r3, [pc, #432]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fd39 	bl	80004b8 <display7SEG>
					status = DECREASE;
 8000a46:	4b69      	ldr	r3, [pc, #420]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 8000a4c:	f7ff fb90 	bl	8000170 <isButton_INC_Pressed>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	f040 80c4 	bne.w	8000be0 <fsm_long_press_run+0x29c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a5c:	f000 fc1c 	bl	8001298 <setTimer3>
				if(counter == 8){
 8000a60:	4b63      	ldr	r3, [pc, #396]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d10b      	bne.n	8000a80 <fsm_long_press_run+0x13c>
					counter = 9;
 8000a68:	4b61      	ldr	r3, [pc, #388]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a6a:	2209      	movs	r2, #9
 8000a6c:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000a6e:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd20 	bl	80004b8 <display7SEG>
					status = VALUE_MAX;
 8000a78:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
					status = INCREASE;
				}
			}

			break;
 8000a7e:	e0af      	b.n	8000be0 <fsm_long_press_run+0x29c>
					counter ++;
 8000a80:	4b5b      	ldr	r3, [pc, #364]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a5a      	ldr	r2, [pc, #360]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a88:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000a8a:	4b59      	ldr	r3, [pc, #356]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd12 	bl	80004b8 <display7SEG>
					status = INCREASE;
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
			break;
 8000a9a:	e0a1      	b.n	8000be0 <fsm_long_press_run+0x29c>
		case LONG_DEC:
			display7SEG(counter);
 8000a9c:	4b54      	ldr	r3, [pc, #336]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fd09 	bl	80004b8 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000aa6:	4b53      	ldr	r3, [pc, #332]	; (8000bf4 <fsm_long_press_run+0x2b0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d114      	bne.n	8000ad8 <fsm_long_press_run+0x194>
				setTimer3(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab2:	f000 fbf1 	bl	8001298 <setTimer3>
				if(counter != 0){
 8000ab6:	4b4e      	ldr	r3, [pc, #312]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d004      	beq.n	8000ac8 <fsm_long_press_run+0x184>
					counter--;
 8000abe:	4b4c      	ldr	r3, [pc, #304]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	4a4a      	ldr	r2, [pc, #296]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000ac6:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000ac8:	4b49      	ldr	r3, [pc, #292]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fcf3 	bl	80004b8 <display7SEG>
				status = COUNT_DOWN;
 8000ad2:	4b46      	ldr	r3, [pc, #280]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000ad4:	220c      	movs	r2, #12
 8000ad6:	601a      	str	r2, [r3, #0]
			}


			if(isButton_DEC_LongPressed() == 1){
 8000ad8:	f7ff fb80 	bl	80001dc <isButton_DEC_LongPressed>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d11d      	bne.n	8000b1e <fsm_long_press_run+0x1da>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000ae2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ae6:	f000 fbd7 	bl	8001298 <setTimer3>
				if(timer2_flag == 1){
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <fsm_long_press_run+0x2b4>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d115      	bne.n	8000b1e <fsm_long_press_run+0x1da>
					counter--;
 8000af2:	4b3f      	ldr	r3, [pc, #252]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a3d      	ldr	r2, [pc, #244]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000afa:	6013      	str	r3, [r2, #0]
					if(counter == -1) counter = 9;
 8000afc:	4b3c      	ldr	r3, [pc, #240]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b04:	d102      	bne.n	8000b0c <fsm_long_press_run+0x1c8>
 8000b06:	4b3a      	ldr	r3, [pc, #232]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b08:	2209      	movs	r2, #9
 8000b0a:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000b0c:	4b38      	ldr	r3, [pc, #224]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff fcd1 	bl	80004b8 <display7SEG>
					setTimer2(1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1a:	f000 fba1 	bl	8001260 <setTimer2>
				}
			}
			if(isButton_INC_LongPressed() == 1){
 8000b1e:	f7ff fb4b 	bl	80001b8 <isButton_INC_LongPressed>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10a      	bne.n	8000b3e <fsm_long_press_run+0x1fa>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b28:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b2c:	f000 fbb4 	bl	8001298 <setTimer3>
				status = LONG_INC;
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000b32:	220b      	movs	r2, #11
 8000b34:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3a:	f000 fb91 	bl	8001260 <setTimer2>
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 8000b3e:	f7ff fb05 	bl	800014c <isButton_RESET_Pressed>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d106      	bne.n	8000b56 <fsm_long_press_run+0x212>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b48:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b4c:	f000 fba4 	bl	8001298 <setTimer3>
				status = reset;
 8000b50:	4b26      	ldr	r3, [pc, #152]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000b56:	f7ff fb1d 	bl	8000194 <isButton_DEC_Pressed>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d118      	bne.n	8000b92 <fsm_long_press_run+0x24e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b60:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b64:	f000 fb98 	bl	8001298 <setTimer3>
				if(counter == 1){
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d103      	bne.n	8000b78 <fsm_long_press_run+0x234>
					status = reset;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	e00c      	b.n	8000b92 <fsm_long_press_run+0x24e>
				}
				else{
					counter --;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b80:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fc96 	bl	80004b8 <display7SEG>
					status = DECREASE;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 8000b92:	f7ff faed 	bl	8000170 <isButton_INC_Pressed>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d123      	bne.n	8000be4 <fsm_long_press_run+0x2a0>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ba0:	f000 fb7a 	bl	8001298 <setTimer3>
				if(counter == 8){
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b08      	cmp	r3, #8
 8000baa:	d10b      	bne.n	8000bc4 <fsm_long_press_run+0x280>
					counter = 9;
 8000bac:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000bae:	2209      	movs	r2, #9
 8000bb0:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fc7e 	bl	80004b8 <display7SEG>
					status = VALUE_MAX;
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
					status = INCREASE;
				}
			}

			break;
 8000bc2:	e00f      	b.n	8000be4 <fsm_long_press_run+0x2a0>
					counter ++;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000bcc:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <fsm_long_press_run+0x2ac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fc70 	bl	80004b8 <display7SEG>
					status = INCREASE;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <fsm_long_press_run+0x2a8>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
			break;
 8000bde:	e001      	b.n	8000be4 <fsm_long_press_run+0x2a0>
			break;
 8000be0:	bf00      	nop
 8000be2:	e000      	b.n	8000be6 <fsm_long_press_run+0x2a2>
			break;
 8000be4:	bf00      	nop
	}
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	20000078 	.word	0x20000078
 8000bf4:	20000090 	.word	0x20000090
 8000bf8:	20000088 	.word	0x20000088

08000bfc <fsm_simple_buttons_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"

void fsm_simple_buttons_run(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	switch(status)
 8000c00:	4b96      	ldr	r3, [pc, #600]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	f200 81d0 	bhi.w	8000faa <fsm_simple_buttons_run+0x3ae>
 8000c0a:	a201      	add	r2, pc, #4	; (adr r2, 8000c10 <fsm_simple_buttons_run+0x14>)
 8000c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c2d 	.word	0x08000c2d
 8000c18:	08000cb5 	.word	0x08000cb5
 8000c1c:	08000dc5 	.word	0x08000dc5
 8000c20:	08000ed7 	.word	0x08000ed7
	{
		case INIT:
			status = reset;
 8000c24:	4b8d      	ldr	r3, [pc, #564]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]
			break;
 8000c2a:	e1c7      	b.n	8000fbc <fsm_simple_buttons_run+0x3c0>
		case reset:
			counter = 0;
 8000c2c:	4b8c      	ldr	r3, [pc, #560]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000c32:	4b8b      	ldr	r3, [pc, #556]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc3e 	bl	80004b8 <display7SEG>
			if(isButton_RESET_Pressed() == 1) status = reset;
 8000c3c:	f7ff fa86 	bl	800014c <isButton_RESET_Pressed>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d102      	bne.n	8000c4c <fsm_simple_buttons_run+0x50>
 8000c46:	4b85      	ldr	r3, [pc, #532]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	601a      	str	r2, [r3, #0]
			if(isButton_DEC_Pressed() == 1){
 8000c4c:	f7ff faa2 	bl	8000194 <isButton_DEC_Pressed>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d105      	bne.n	8000c62 <fsm_simple_buttons_run+0x66>
				counter = 9;
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c58:	2209      	movs	r2, #9
 8000c5a:	601a      	str	r2, [r3, #0]
				status = VALUE_MAX;
 8000c5c:	4b7f      	ldr	r3, [pc, #508]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_Pressed() == 1) {
 8000c62:	f7ff fa85 	bl	8000170 <isButton_INC_Pressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d107      	bne.n	8000c7c <fsm_simple_buttons_run+0x80>
				counter ++;
 8000c6c:	4b7c      	ldr	r3, [pc, #496]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	4a7b      	ldr	r2, [pc, #492]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c74:	6013      	str	r3, [r2, #0]
				status = INCREASE;
 8000c76:	4b79      	ldr	r3, [pc, #484]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000c7c:	f7ff faae 	bl	80001dc <isButton_DEC_LongPressed>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d107      	bne.n	8000c96 <fsm_simple_buttons_run+0x9a>
				counter--;
 8000c86:	4b76      	ldr	r3, [pc, #472]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a74      	ldr	r2, [pc, #464]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000c8e:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000c90:	4b72      	ldr	r3, [pc, #456]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000c92:	220a      	movs	r2, #10
 8000c94:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000c96:	f7ff fa8f 	bl	80001b8 <isButton_INC_LongPressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	f040 8186 	bne.w	8000fae <fsm_simple_buttons_run+0x3b2>
				counter++;
 8000ca2:	4b6f      	ldr	r3, [pc, #444]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a6d      	ldr	r2, [pc, #436]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000caa:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000cac:	4b6b      	ldr	r3, [pc, #428]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000cae:	220b      	movs	r2, #11
 8000cb0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cb2:	e17c      	b.n	8000fae <fsm_simple_buttons_run+0x3b2>
		case INCREASE:
			display7SEG(counter);
 8000cb4:	4b6a      	ldr	r3, [pc, #424]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fbfd 	bl	80004b8 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000cbe:	4b69      	ldr	r3, [pc, #420]	; (8000e64 <fsm_simple_buttons_run+0x268>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d114      	bne.n	8000cf0 <fsm_simple_buttons_run+0xf4>
				setTimer3(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f000 fae5 	bl	8001298 <setTimer3>
				if(counter != 0){
 8000cce:	4b64      	ldr	r3, [pc, #400]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <fsm_simple_buttons_run+0xe4>
					counter--;
 8000cd6:	4b62      	ldr	r3, [pc, #392]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	4a60      	ldr	r2, [pc, #384]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000cde:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000ce0:	4b5f      	ldr	r3, [pc, #380]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fbe7 	bl	80004b8 <display7SEG>
				status = COUNT_DOWN;
 8000cea:	4b5c      	ldr	r3, [pc, #368]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000cec:	220c      	movs	r2, #12
 8000cee:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000cf0:	f7ff fa3e 	bl	8000170 <isButton_INC_Pressed>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d11b      	bne.n	8000d32 <fsm_simple_buttons_run+0x136>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000cfa:	f242 7010 	movw	r0, #10000	; 0x2710
 8000cfe:	f000 facb 	bl	8001298 <setTimer3>
				if(counter == 8){
 8000d02:	4b57      	ldr	r3, [pc, #348]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d106      	bne.n	8000d18 <fsm_simple_buttons_run+0x11c>
					counter = 9;
 8000d0a:	4b55      	ldr	r3, [pc, #340]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d0c:	2209      	movs	r2, #9
 8000d0e:	601a      	str	r2, [r3, #0]
					status = VALUE_MAX;
 8000d10:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e00c      	b.n	8000d32 <fsm_simple_buttons_run+0x136>
				}
				else{
					counter ++;
 8000d18:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a50      	ldr	r2, [pc, #320]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d20:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000d22:	4b4f      	ldr	r3, [pc, #316]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fbc6 	bl	80004b8 <display7SEG>
					status = INCREASE;
 8000d2c:	4b4b      	ldr	r3, [pc, #300]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	601a      	str	r2, [r3, #0]
				}

			}
			if(isButton_DEC_Pressed() == 1){
 8000d32:	f7ff fa2f 	bl	8000194 <isButton_DEC_Pressed>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d113      	bne.n	8000d64 <fsm_simple_buttons_run+0x168>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d3c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d40:	f000 faaa 	bl	8001298 <setTimer3>
				if(counter == 1){
 8000d44:	4b46      	ldr	r3, [pc, #280]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d103      	bne.n	8000d54 <fsm_simple_buttons_run+0x158>
					status = reset;
 8000d4c:	4b43      	ldr	r3, [pc, #268]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e007      	b.n	8000d64 <fsm_simple_buttons_run+0x168>
				}
				else{
					counter --;
 8000d54:	4b42      	ldr	r3, [pc, #264]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d5c:	6013      	str	r3, [r2, #0]
					status = DECREASE;
 8000d5e:	4b3f      	ldr	r3, [pc, #252]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_RESET_Pressed() == 1){
 8000d64:	f7ff f9f2 	bl	800014c <isButton_RESET_Pressed>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d106      	bne.n	8000d7c <fsm_simple_buttons_run+0x180>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d72:	f000 fa91 	bl	8001298 <setTimer3>
				status = reset;
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000d7c:	f7ff fa2e 	bl	80001dc <isButton_DEC_LongPressed>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d10b      	bne.n	8000d9e <fsm_simple_buttons_run+0x1a2>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d86:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d8a:	f000 fa85 	bl	8001298 <setTimer3>
				counter--;
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	4a32      	ldr	r2, [pc, #200]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000d96:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000d98:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000d9e:	f7ff fa0b 	bl	80001b8 <isButton_INC_LongPressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	f040 8104 	bne.w	8000fb2 <fsm_simple_buttons_run+0x3b6>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000daa:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dae:	f000 fa73 	bl	8001298 <setTimer3>
				counter++;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000dba:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000dbe:	220b      	movs	r2, #11
 8000dc0:	601a      	str	r2, [r3, #0]
			}

			break;
 8000dc2:	e0f6      	b.n	8000fb2 <fsm_simple_buttons_run+0x3b6>
		case DECREASE:
			display7SEG(counter);
 8000dc4:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb75 	bl	80004b8 <display7SEG>

			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <fsm_simple_buttons_run+0x268>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d114      	bne.n	8000e00 <fsm_simple_buttons_run+0x204>
				setTimer3(1000);
 8000dd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dda:	f000 fa5d 	bl	8001298 <setTimer3>
				if(counter != 0){
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <fsm_simple_buttons_run+0x1f4>
					counter--;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000dee:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fb5f 	bl	80004b8 <display7SEG>
				status = COUNT_DOWN;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000dfc:	220c      	movs	r2, #12
 8000dfe:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000e00:	f7ff f9b6 	bl	8000170 <isButton_INC_Pressed>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d116      	bne.n	8000e38 <fsm_simple_buttons_run+0x23c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e0a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e0e:	f000 fa43 	bl	8001298 <setTimer3>
				if(counter == 8){
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b08      	cmp	r3, #8
 8000e18:	d106      	bne.n	8000e28 <fsm_simple_buttons_run+0x22c>
					counter = 9;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000e1c:	2209      	movs	r2, #9
 8000e1e:	601a      	str	r2, [r3, #0]
					status = VALUE_MAX;
 8000e20:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e007      	b.n	8000e38 <fsm_simple_buttons_run+0x23c>
				}
				else{
					counter++;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	4a0c      	ldr	r2, [pc, #48]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000e30:	6013      	str	r3, [r2, #0]
					status = INCREASE;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000e34:	2202      	movs	r2, #2
 8000e36:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_DEC_Pressed() == 1){
 8000e38:	f7ff f9ac 	bl	8000194 <isButton_DEC_Pressed>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d11a      	bne.n	8000e78 <fsm_simple_buttons_run+0x27c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e42:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e46:	f000 fa27 	bl	8001298 <setTimer3>
				if(counter == 1){
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <fsm_simple_buttons_run+0x264>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10a      	bne.n	8000e68 <fsm_simple_buttons_run+0x26c>
					status = reset;
 8000e52:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <fsm_simple_buttons_run+0x260>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	e00e      	b.n	8000e78 <fsm_simple_buttons_run+0x27c>
 8000e5a:	bf00      	nop
 8000e5c:	20000074 	.word	0x20000074
 8000e60:	20000078 	.word	0x20000078
 8000e64:	20000090 	.word	0x20000090
				}
				else{
					counter--;
 8000e68:	4b55      	ldr	r3, [pc, #340]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000e70:	6013      	str	r3, [r2, #0]
					status = DECREASE;
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000e74:	2203      	movs	r2, #3
 8000e76:	601a      	str	r2, [r3, #0]
				}

			}
			if(isButton_RESET_Pressed() == 1){
 8000e78:	f7ff f968 	bl	800014c <isButton_RESET_Pressed>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d106      	bne.n	8000e90 <fsm_simple_buttons_run+0x294>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e82:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e86:	f000 fa07 	bl	8001298 <setTimer3>
				status = reset;
 8000e8a:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000e90:	f7ff f9a4 	bl	80001dc <isButton_DEC_LongPressed>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d10b      	bne.n	8000eb2 <fsm_simple_buttons_run+0x2b6>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e9a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e9e:	f000 f9fb 	bl	8001298 <setTimer3>
				counter--;
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	4a45      	ldr	r2, [pc, #276]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000eaa:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000eac:	4b45      	ldr	r3, [pc, #276]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000eae:	220a      	movs	r2, #10
 8000eb0:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000eb2:	f7ff f981 	bl	80001b8 <isButton_INC_LongPressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d17c      	bne.n	8000fb6 <fsm_simple_buttons_run+0x3ba>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000ebc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ec0:	f000 f9ea 	bl	8001298 <setTimer3>
				counter++;
 8000ec4:	4b3e      	ldr	r3, [pc, #248]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a3d      	ldr	r2, [pc, #244]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000ecc:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000ece:	4b3d      	ldr	r3, [pc, #244]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000ed0:	220b      	movs	r2, #11
 8000ed2:	601a      	str	r2, [r3, #0]
			}

			break;
 8000ed4:	e06f      	b.n	8000fb6 <fsm_simple_buttons_run+0x3ba>
		case VALUE_MAX:
			display7SEG(counter);
 8000ed6:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff faec 	bl	80004b8 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <fsm_simple_buttons_run+0x3cc>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d114      	bne.n	8000f12 <fsm_simple_buttons_run+0x316>
				setTimer3(1000);
 8000ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eec:	f000 f9d4 	bl	8001298 <setTimer3>
				if(counter != 0){
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <fsm_simple_buttons_run+0x306>
					counter--;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f00:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000f02:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fad6 	bl	80004b8 <display7SEG>
				status = COUNT_DOWN;
 8000f0c:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000f12:	f7ff f92d 	bl	8000170 <isButton_INC_Pressed>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d106      	bne.n	8000f2a <fsm_simple_buttons_run+0x32e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f1c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f20:	f000 f9ba 	bl	8001298 <setTimer3>
				status = reset;
 8000f24:	4b27      	ldr	r3, [pc, #156]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000f2a:	f7ff f933 	bl	8000194 <isButton_DEC_Pressed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d10b      	bne.n	8000f4c <fsm_simple_buttons_run+0x350>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f34:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f38:	f000 f9ae 	bl	8001298 <setTimer3>
				counter --;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	4a1f      	ldr	r2, [pc, #124]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f44:	6013      	str	r3, [r2, #0]
				status = DECREASE;
 8000f46:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	601a      	str	r2, [r3, #0]
			}
			if(isButton_RESET_Pressed() == 1){
 8000f4c:	f7ff f8fe 	bl	800014c <isButton_RESET_Pressed>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d106      	bne.n	8000f64 <fsm_simple_buttons_run+0x368>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f56:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f5a:	f000 f99d 	bl	8001298 <setTimer3>
				status = reset;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000f64:	f7ff f93a 	bl	80001dc <isButton_DEC_LongPressed>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10b      	bne.n	8000f86 <fsm_simple_buttons_run+0x38a>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f72:	f000 f991 	bl	8001298 <setTimer3>
				counter--;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	4a10      	ldr	r2, [pc, #64]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f7e:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000f80:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000f82:	220a      	movs	r2, #10
 8000f84:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000f86:	f7ff f917 	bl	80001b8 <isButton_INC_LongPressed>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d114      	bne.n	8000fba <fsm_simple_buttons_run+0x3be>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f90:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f94:	f000 f980 	bl	8001298 <setTimer3>
				counter++;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <fsm_simple_buttons_run+0x3c4>)
 8000fa0:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <fsm_simple_buttons_run+0x3c8>)
 8000fa4:	220b      	movs	r2, #11
 8000fa6:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fa8:	e007      	b.n	8000fba <fsm_simple_buttons_run+0x3be>
		default:
			break;
 8000faa:	bf00      	nop
 8000fac:	e006      	b.n	8000fbc <fsm_simple_buttons_run+0x3c0>
			break;
 8000fae:	bf00      	nop
 8000fb0:	e004      	b.n	8000fbc <fsm_simple_buttons_run+0x3c0>
			break;
 8000fb2:	bf00      	nop
 8000fb4:	e002      	b.n	8000fbc <fsm_simple_buttons_run+0x3c0>
			break;
 8000fb6:	bf00      	nop
 8000fb8:	e000      	b.n	8000fbc <fsm_simple_buttons_run+0x3c0>
			break;
 8000fba:	bf00      	nop

	}
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000078 	.word	0x20000078
 8000fc4:	20000074 	.word	0x20000074
 8000fc8:	20000090 	.word	0x20000090

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 fa74 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f82e 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f8b4 	bl	8001144 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fdc:	f000 f866 	bl	80010ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <main+0x58>)
 8000fe2:	f001 f9d5 	bl	8002390 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <main+0x5c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
  setTimer1(500);// timer for debugging by led red
 8000fec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff0:	f000 f91a 	bl	8001228 <setTimer1>
  setTimer2(1000);// timer countDown to update counter while press and hold
 8000ff4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ff8:	f000 f932 	bl	8001260 <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer1_flag == 1)// use LED-RED for debug
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <main+0x60>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d107      	bne.n	8001014 <main+0x48>
	  {
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001004:	2120      	movs	r1, #32
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <main+0x64>)
 8001008:	f000 fd71 	bl	8001aee <HAL_GPIO_TogglePin>
			setTimer1(500);
 800100c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001010:	f000 f90a 	bl	8001228 <setTimer1>
	  }
	  fsm_simple_buttons_run();
 8001014:	f7ff fdf2 	bl	8000bfc <fsm_simple_buttons_run>
	  fsm_long_press_run();
 8001018:	f7ff fc94 	bl	8000944 <fsm_long_press_run>
	  fsm_count_down_run();
 800101c:	f7ff fbd2 	bl	80007c4 <fsm_count_down_run>
  {
 8001020:	e7ec      	b.n	8000ffc <main+0x30>
 8001022:	bf00      	nop
 8001024:	20000094 	.word	0x20000094
 8001028:	20000074 	.word	0x20000074
 800102c:	20000080 	.word	0x20000080
 8001030:	40010800 	.word	0x40010800

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b090      	sub	sp, #64	; 0x40
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2228      	movs	r2, #40	; 0x28
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fd5c 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105e:	2310      	movs	r3, #16
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001062:	2300      	movs	r3, #0
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fd58 	bl	8001b20 <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001076:	f000 f8d1 	bl	800121c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f000 ffc4 	bl	8002020 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800109e:	f000 f8bd 	bl	800121c <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3740      	adds	r7, #64	; 0x40
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_TIM2_Init+0x94>)
 80010ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_TIM2_Init+0x94>)
 80010d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_TIM2_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_TIM2_Init+0x94>)
 80010e0:	2209      	movs	r2, #9
 80010e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_TIM2_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_TIM2_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010f0:	4813      	ldr	r0, [pc, #76]	; (8001140 <MX_TIM2_Init+0x94>)
 80010f2:	f001 f8fd 	bl	80022f0 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010fc:	f000 f88e 	bl	800121c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM2_Init+0x94>)
 800110e:	f001 fa93 	bl	8002638 <HAL_TIM_ConfigClockSource>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001118:	f000 f880 	bl	800121c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_TIM2_Init+0x94>)
 800112a:	f001 fc5b 	bl	80029e4 <HAL_TIMEx_MasterConfigSynchronization>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001134:	f000 f872 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000094 	.word	0x20000094

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xb4>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <MX_GPIO_Init+0xb4>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_GPIO_Init+0xb4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_GPIO_Init+0xb4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <MX_GPIO_Init+0xb4>)
 8001176:	f043 0308 	orr.w	r3, r3, #8
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_GPIO_Init+0xb4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2120      	movs	r1, #32
 800118c:	481b      	ldr	r0, [pc, #108]	; (80011fc <MX_GPIO_Init+0xb8>)
 800118e:	f000 fc96 	bl	8001abe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001192:	2200      	movs	r2, #0
 8001194:	21ff      	movs	r1, #255	; 0xff
 8001196:	481a      	ldr	r0, [pc, #104]	; (8001200 <MX_GPIO_Init+0xbc>)
 8001198:	f000 fc91 	bl	8001abe <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800119c:	2320      	movs	r3, #32
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0308 	add.w	r3, r7, #8
 80011b0:	4619      	mov	r1, r3
 80011b2:	4812      	ldr	r0, [pc, #72]	; (80011fc <MX_GPIO_Init+0xb8>)
 80011b4:	f000 faf2 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80011b8:	23ff      	movs	r3, #255	; 0xff
 80011ba:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2302      	movs	r3, #2
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_GPIO_Init+0xbc>)
 80011d0:	f000 fae4 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 80011d4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_GPIO_Init+0xb8>)
 80011ea:	f000 fad7 	bl	800179c <HAL_GPIO_Init>

}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00

08001204 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	timeRun();
 800120c:	f000 f860 	bl	80012d0 <timeRun>
	getKeyInput();
 8001210:	f7fe fff6 	bl	8000200 <getKeyInput>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	e7fe      	b.n	8001224 <Error_Handler+0x8>
	...

08001228 <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a08      	ldr	r2, [pc, #32]	; (8001254 <setTimer1+0x2c>)
 8001234:	fb82 1203 	smull	r1, r2, r2, r3
 8001238:	1092      	asrs	r2, r2, #2
 800123a:	17db      	asrs	r3, r3, #31
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4a06      	ldr	r2, [pc, #24]	; (8001258 <setTimer1+0x30>)
 8001240:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <setTimer1+0x34>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	66666667 	.word	0x66666667
 8001258:	2000007c 	.word	0x2000007c
 800125c:	20000080 	.word	0x20000080

08001260 <setTimer2>:

void setTimer2(int duration)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a08      	ldr	r2, [pc, #32]	; (800128c <setTimer2+0x2c>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	1092      	asrs	r2, r2, #2
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <setTimer2+0x30>)
 8001278:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <setTimer2+0x34>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	66666667 	.word	0x66666667
 8001290:	20000084 	.word	0x20000084
 8001294:	20000088 	.word	0x20000088

08001298 <setTimer3>:

void setTimer3(int duration)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <setTimer3+0x2c>)
 80012a4:	fb82 1203 	smull	r1, r2, r2, r3
 80012a8:	1092      	asrs	r2, r2, #2
 80012aa:	17db      	asrs	r3, r3, #31
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <setTimer3+0x30>)
 80012b0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <setTimer3+0x34>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	66666667 	.word	0x66666667
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	20000090 	.word	0x20000090

080012d0 <timeRun>:

void timeRun()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <timeRun+0x6c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	dd04      	ble.n	80012e6 <timeRun+0x16>
	{
		timer1_counter--;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <timeRun+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	4a16      	ldr	r2, [pc, #88]	; (800133c <timeRun+0x6c>)
 80012e4:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter <= 0)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <timeRun+0x6c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	dc02      	bgt.n	80012f4 <timeRun+0x24>
	{
		timer1_flag = 1;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <timeRun+0x70>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
	}


	if(timer2_counter > 0)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <timeRun+0x74>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	dd04      	ble.n	8001306 <timeRun+0x36>
	{
		timer2_counter--;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <timeRun+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3b01      	subs	r3, #1
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <timeRun+0x74>)
 8001304:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter <= 0)
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <timeRun+0x74>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc02      	bgt.n	8001314 <timeRun+0x44>
	{
		timer2_flag = 1;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <timeRun+0x78>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0)
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <timeRun+0x7c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd04      	ble.n	8001326 <timeRun+0x56>
	{
		timer3_counter--;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <timeRun+0x7c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3b01      	subs	r3, #1
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <timeRun+0x7c>)
 8001324:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter <= 0)
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <timeRun+0x7c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc02      	bgt.n	8001334 <timeRun+0x64>
	{
		timer3_flag = 1;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <timeRun+0x80>)
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
	}

}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	2000007c 	.word	0x2000007c
 8001340:	20000080 	.word	0x20000080
 8001344:	20000084 	.word	0x20000084
 8001348:	20000088 	.word	0x20000088
 800134c:	2000008c 	.word	0x2000008c
 8001350:	20000090 	.word	0x20000090

08001354 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_MspInit+0x5c>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <HAL_MspInit+0x5c>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6193      	str	r3, [r2, #24]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_MspInit+0x5c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	4a0e      	ldr	r2, [pc, #56]	; (80013b0 <HAL_MspInit+0x5c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	61d3      	str	r3, [r2, #28]
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_MspInit+0x60>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_MspInit+0x60>)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010000 	.word	0x40010000

080013b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013c8:	d113      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	61d3      	str	r3, [r2, #28]
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201c      	movs	r0, #28
 80013e8:	f000 f9a1 	bl	800172e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013ec:	201c      	movs	r0, #28
 80013ee:	f000 f9ba 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 f87f 	bl	8001548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <TIM2_IRQHandler+0x10>)
 8001456:	f000 ffe7 	bl	8002428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000094 	.word	0x20000094

08001464 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001496:	f7ff ffe5 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f001 fb0d 	bl	8002ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800149e:	f7ff fd95 	bl	8000fcc <main>
  bx lr
 80014a2:	4770      	bx	lr
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80014ac:	08002b50 	.word	0x08002b50
  ldr r2, =_sbss
 80014b0:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80014b4:	200000e0 	.word	0x200000e0

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_Init+0x28>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x28>)
 80014c6:	f043 0310 	orr.w	r3, r3, #16
 80014ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 f923 	bl	8001718 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d2:	200f      	movs	r0, #15
 80014d4:	f000 f808 	bl	80014e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014d8:	f7ff ff3c 	bl	8001354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <HAL_InitTick+0x54>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_InitTick+0x58>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f93b 	bl	8001782 <HAL_SYSTICK_Config>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e00e      	b.n	8001534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b0f      	cmp	r3, #15
 800151a:	d80a      	bhi.n	8001532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800151c:	2200      	movs	r2, #0
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f000 f903 	bl	800172e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001528:	4a06      	ldr	r2, [pc, #24]	; (8001544 <HAL_InitTick+0x5c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	e000      	b.n	8001534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000034 	.word	0x20000034
 8001540:	2000003c 	.word	0x2000003c
 8001544:	20000038 	.word	0x20000038

08001548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_IncTick+0x1c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_IncTick+0x20>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a03      	ldr	r2, [pc, #12]	; (8001568 <HAL_IncTick+0x20>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	2000003c 	.word	0x2000003c
 8001568:	200000dc 	.word	0x200000dc

0800156c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return uwTick;
 8001570:	4b02      	ldr	r3, [pc, #8]	; (800157c <HAL_GetTick+0x10>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	200000dc 	.word	0x200000dc

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4906      	ldr	r1, [pc, #24]	; (8001618 <__NVIC_EnableIRQ+0x34>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d301      	bcc.n	80016ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00f      	b.n	800170a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <SysTick_Config+0x40>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f2:	210f      	movs	r1, #15
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f7ff ff90 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <SysTick_Config+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	; (8001714 <SysTick_Config+0x40>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff2d 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff42 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff90 	bl	8001670 <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5f 	bl	800161c <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff35 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa2 	bl	80016d4 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b08b      	sub	sp, #44	; 0x2c
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ae:	e148      	b.n	8001a42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017b0:	2201      	movs	r2, #1
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 8137 	bne.w	8001a3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4aa3      	ldr	r2, [pc, #652]	; (8001a60 <HAL_GPIO_Init+0x2c4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d05e      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017d8:	4aa1      	ldr	r2, [pc, #644]	; (8001a60 <HAL_GPIO_Init+0x2c4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d875      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017de:	4aa1      	ldr	r2, [pc, #644]	; (8001a64 <HAL_GPIO_Init+0x2c8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d058      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017e4:	4a9f      	ldr	r2, [pc, #636]	; (8001a64 <HAL_GPIO_Init+0x2c8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d86f      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017ea:	4a9f      	ldr	r2, [pc, #636]	; (8001a68 <HAL_GPIO_Init+0x2cc>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d052      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017f0:	4a9d      	ldr	r2, [pc, #628]	; (8001a68 <HAL_GPIO_Init+0x2cc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d869      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 80017f6:	4a9d      	ldr	r2, [pc, #628]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d04c      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 80017fc:	4a9b      	ldr	r2, [pc, #620]	; (8001a6c <HAL_GPIO_Init+0x2d0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d863      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 8001802:	4a9b      	ldr	r2, [pc, #620]	; (8001a70 <HAL_GPIO_Init+0x2d4>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d046      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
 8001808:	4a99      	ldr	r2, [pc, #612]	; (8001a70 <HAL_GPIO_Init+0x2d4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d85d      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 800180e:	2b12      	cmp	r3, #18
 8001810:	d82a      	bhi.n	8001868 <HAL_GPIO_Init+0xcc>
 8001812:	2b12      	cmp	r3, #18
 8001814:	d859      	bhi.n	80018ca <HAL_GPIO_Init+0x12e>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <HAL_GPIO_Init+0x80>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	08001897 	.word	0x08001897
 8001820:	08001871 	.word	0x08001871
 8001824:	08001883 	.word	0x08001883
 8001828:	080018c5 	.word	0x080018c5
 800182c:	080018cb 	.word	0x080018cb
 8001830:	080018cb 	.word	0x080018cb
 8001834:	080018cb 	.word	0x080018cb
 8001838:	080018cb 	.word	0x080018cb
 800183c:	080018cb 	.word	0x080018cb
 8001840:	080018cb 	.word	0x080018cb
 8001844:	080018cb 	.word	0x080018cb
 8001848:	080018cb 	.word	0x080018cb
 800184c:	080018cb 	.word	0x080018cb
 8001850:	080018cb 	.word	0x080018cb
 8001854:	080018cb 	.word	0x080018cb
 8001858:	080018cb 	.word	0x080018cb
 800185c:	080018cb 	.word	0x080018cb
 8001860:	08001879 	.word	0x08001879
 8001864:	0800188d 	.word	0x0800188d
 8001868:	4a82      	ldr	r2, [pc, #520]	; (8001a74 <HAL_GPIO_Init+0x2d8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800186e:	e02c      	b.n	80018ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	623b      	str	r3, [r7, #32]
          break;
 8001876:	e029      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	3304      	adds	r3, #4
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e024      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	3308      	adds	r3, #8
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e01f      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	330c      	adds	r3, #12
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e01a      	b.n	80018cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800189e:	2304      	movs	r3, #4
 80018a0:	623b      	str	r3, [r7, #32]
          break;
 80018a2:	e013      	b.n	80018cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	611a      	str	r2, [r3, #16]
          break;
 80018b6:	e009      	b.n	80018cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	615a      	str	r2, [r3, #20]
          break;
 80018c2:	e003      	b.n	80018cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x130>
          break;
 80018ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d801      	bhi.n	80018d6 <HAL_GPIO_Init+0x13a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	e001      	b.n	80018da <HAL_GPIO_Init+0x13e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3304      	adds	r3, #4
 80018da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	; 0xff
 80018e0:	d802      	bhi.n	80018e8 <HAL_GPIO_Init+0x14c>
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	e002      	b.n	80018ee <HAL_GPIO_Init+0x152>
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	3b08      	subs	r3, #8
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	210f      	movs	r1, #15
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	6a39      	ldr	r1, [r7, #32]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	431a      	orrs	r2, r3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 8090 	beq.w	8001a3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_GPIO_Init+0x2dc>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a55      	ldr	r2, [pc, #340]	; (8001a78 <HAL_GPIO_Init+0x2dc>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_GPIO_Init+0x2dc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001934:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <HAL_GPIO_Init+0x2e0>)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a49      	ldr	r2, [pc, #292]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1e0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a48      	ldr	r2, [pc, #288]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1dc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_GPIO_Init+0x2ec>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1d8>
 8001970:	2302      	movs	r3, #2
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 8001974:	2303      	movs	r3, #3
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1e2>
 800197c:	2300      	movs	r3, #0
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198e:	493b      	ldr	r1, [pc, #236]	; (8001a7c <HAL_GPIO_Init+0x2e0>)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4937      	ldr	r1, [pc, #220]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4933      	ldr	r1, [pc, #204]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	492d      	ldr	r1, [pc, #180]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4929      	ldr	r1, [pc, #164]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4923      	ldr	r1, [pc, #140]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	491f      	ldr	r1, [pc, #124]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d006      	beq.n	8001a2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	4919      	ldr	r1, [pc, #100]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4915      	ldr	r1, [pc, #84]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	3301      	adds	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f aeaf 	bne.w	80017b0 <HAL_GPIO_Init+0x14>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	372c      	adds	r7, #44	; 0x2c
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	10320000 	.word	0x10320000
 8001a64:	10310000 	.word	0x10310000
 8001a68:	10220000 	.word	0x10220000
 8001a6c:	10210000 	.word	0x10210000
 8001a70:	10120000 	.word	0x10120000
 8001a74:	10110000 	.word	0x10110000
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	40010800 	.word	0x40010800
 8001a84:	40010c00 	.word	0x40010c00
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	807b      	strh	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ace:	787b      	ldrb	r3, [r7, #1]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad4:	887a      	ldrh	r2, [r7, #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ada:	e003      	b.n	8001ae4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001adc:	887b      	ldrh	r3, [r7, #2]
 8001ade:	041a      	lsls	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	611a      	str	r2, [r3, #16]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e26c      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8087 	beq.w	8001c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b92      	ldr	r3, [pc, #584]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4b8f      	ldr	r3, [pc, #572]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
 8001b58:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x12c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d168      	bne.n	8001c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e246      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76>
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a7f      	ldr	r2, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a77      	ldr	r2, [pc, #476]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xbc>
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a71      	ldr	r2, [pc, #452]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a67      	ldr	r2, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fcb6 	bl	800156c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fcb2 	bl	800156c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1fa      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe4>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fca2 	bl	800156c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fc9e 	bl	800156c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1e6      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10c>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c66:	4b49      	ldr	r3, [pc, #292]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
 8001c72:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1ba      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4939      	ldr	r1, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fc57 	bl	800156c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fc53 	bl	800156c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e19b      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc36 	bl	800156c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc32 	bl	800156c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e17a      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03a      	beq.n	8001da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fc16 	bl	800156c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc12 	bl	800156c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e15a      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f000 faa6 	bl	80022b4 <RCC_Delay>
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff fbfc 	bl	800156c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fbf8 	bl	800156c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d908      	bls.n	8001d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e140      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	42420000 	.word	0x42420000
 8001d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b9e      	ldr	r3, [pc, #632]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e9      	bne.n	8001d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a6 	beq.w	8001efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b97      	ldr	r3, [pc, #604]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a93      	ldr	r2, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b91      	ldr	r3, [pc, #580]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b8e      	ldr	r3, [pc, #568]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8a      	ldr	r2, [pc, #552]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fbb9 	bl	800156c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfe:	f7ff fbb5 	bl	800156c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0fd      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	4b81      	ldr	r3, [pc, #516]	; (8002018 <HAL_RCC_OscConfig+0x4f8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e24:	4b7b      	ldr	r3, [pc, #492]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a7a      	ldr	r2, [pc, #488]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e3a:	4b76      	ldr	r3, [pc, #472]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a75      	ldr	r2, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b73      	ldr	r3, [pc, #460]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a72      	ldr	r2, [pc, #456]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	e01c      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x356>
 8001e5c:	4b6d      	ldr	r3, [pc, #436]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a6c      	ldr	r2, [pc, #432]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b64      	ldr	r3, [pc, #400]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a63      	ldr	r2, [pc, #396]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d015      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fb69 	bl	800156c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fb65 	bl	800156c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0ab      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ee      	beq.n	8001e9e <HAL_RCC_OscConfig+0x37e>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fb53 	bl	800156c <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fb4f 	bl	800156c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e095      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ee      	bne.n	8001eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a47      	ldr	r2, [pc, #284]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8081 	beq.w	800200a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d061      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d146      	bne.n	8001faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fb23 	bl	800156c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fb1f 	bl	800156c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e067      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	492d      	ldr	r1, [pc, #180]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a19      	ldr	r1, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	430b      	orrs	r3, r1
 8001f76:	4927      	ldr	r1, [pc, #156]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff faf3 	bl	800156c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff faef 	bl	800156c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e037      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
 8001fa8:	e02f      	b.n	800200a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_RCC_OscConfig+0x4fc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fadc 	bl	800156c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fad8 	bl	800156c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e020      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x498>
 8001fd6:	e018      	b.n	800200a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e013      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d106      	bne.n	8002006 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	42420060 	.word	0x42420060

08002020 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0d0      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	429a      	cmp	r2, r3
 8002040:	d910      	bls.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002042:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f023 0207 	bic.w	r2, r3, #7
 800204a:	4965      	ldr	r1, [pc, #404]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	4313      	orrs	r3, r2
 8002050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002052:	4b63      	ldr	r3, [pc, #396]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d001      	beq.n	8002064 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0b8      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d020      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002086:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800209e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	494d      	ldr	r1, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d040      	beq.n	8002140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d115      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e07f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d107      	bne.n	80020ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e073      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06b      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fe:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f023 0203 	bic.w	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4936      	ldr	r1, [pc, #216]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002110:	f7ff fa2c 	bl	800156c <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	e00a      	b.n	800212e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7ff fa28 	bl	800156c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e053      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212e:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 020c 	and.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	429a      	cmp	r2, r3
 800213e:	d1eb      	bne.n	8002118 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d210      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 0207 	bic.w	r2, r3, #7
 8002156:	4922      	ldr	r1, [pc, #136]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e032      	b.n	80021d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219a:	4b12      	ldr	r3, [pc, #72]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ae:	f000 f821 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	091b      	lsrs	r3, r3, #4
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	490a      	ldr	r1, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	5ccb      	ldrb	r3, [r1, r3]
 80021c2:	fa22 f303 	lsr.w	r3, r2, r3
 80021c6:	4a09      	ldr	r2, [pc, #36]	; (80021ec <HAL_RCC_ClockConfig+0x1cc>)
 80021c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f98a 	bl	80014e8 <HAL_InitTick>

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08002b38 	.word	0x08002b38
 80021ec:	20000034 	.word	0x20000034
 80021f0:	20000038 	.word	0x20000038

080021f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b490      	push	{r4, r7}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021fc:	1d3c      	adds	r4, r7, #4
 80021fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002200:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002204:	f240 2301 	movw	r3, #513	; 0x201
 8002208:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800221e:	4b22      	ldr	r3, [pc, #136]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x40>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x46>
 8002232:	e02d      	b.n	8002290 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	e02d      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	0c9b      	lsrs	r3, r3, #18
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002246:	4413      	add	r3, r2
 8002248:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800224c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	0c5b      	lsrs	r3, r3, #17
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002266:	4413      	add	r3, r2
 8002268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800226c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4a0e      	ldr	r2, [pc, #56]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002272:	fb02 f203 	mul.w	r2, r2, r3
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	e004      	b.n	800228a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002284:	fb02 f303 	mul.w	r3, r2, r3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	623b      	str	r3, [r7, #32]
      break;
 800228e:	e002      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002292:	623b      	str	r3, [r7, #32]
      break;
 8002294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002296:	6a3b      	ldr	r3, [r7, #32]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bc90      	pop	{r4, r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	08002b28 	.word	0x08002b28
 80022a8:	40021000 	.word	0x40021000
 80022ac:	007a1200 	.word	0x007a1200
 80022b0:	003d0900 	.word	0x003d0900

080022b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <RCC_Delay+0x34>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0a      	ldr	r2, [pc, #40]	; (80022ec <RCC_Delay+0x38>)
 80022c2:	fba2 2303 	umull	r2, r3, r2, r3
 80022c6:	0a5b      	lsrs	r3, r3, #9
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	fb02 f303 	mul.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d0:	bf00      	nop
  }
  while (Delay --);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	60fa      	str	r2, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f9      	bne.n	80022d0 <RCC_Delay+0x1c>
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000034 	.word	0x20000034
 80022ec:	10624dd3 	.word	0x10624dd3

080022f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e041      	b.n	8002386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff f84e 	bl	80013b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2202      	movs	r2, #2
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3304      	adds	r3, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f000 fa6a 	bl	8002808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
	...

08002390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d001      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e035      	b.n	8002414 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a16      	ldr	r2, [pc, #88]	; (8002420 <HAL_TIM_Base_Start_IT+0x90>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d009      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d004      	beq.n	80023de <HAL_TIM_Base_Start_IT+0x4e>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_TIM_Base_Start_IT+0x94>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d111      	bne.n	8002402 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b06      	cmp	r3, #6
 80023ee:	d010      	beq.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	e007      	b.n	8002412 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40000400 	.word	0x40000400

08002428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0202 	mvn.w	r2, #2
 8002454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f9b1 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f9a4 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f9b3 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0204 	mvn.w	r2, #4
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f987 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f97a 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f989 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0208 	mvn.w	r2, #8
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2204      	movs	r2, #4
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f95d 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f950 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f95f 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b10      	cmp	r3, #16
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0210 	mvn.w	r2, #16
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2208      	movs	r2, #8
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f933 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f926 	bl	80027c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f935 	bl	80027e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe fe2c 	bl	8001204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fa67 	bl	8002aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d10e      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	d107      	bne.n	8002604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f8f9 	bl	80027f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b20      	cmp	r3, #32
 8002610:	d10e      	bne.n	8002630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b20      	cmp	r3, #32
 800261e:	d107      	bne.n	8002630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0220 	mvn.w	r2, #32
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fa32 	bl	8002a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIM_ConfigClockSource+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e0b3      	b.n	80027b8 <HAL_TIM_ConfigClockSource+0x180>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800266e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002688:	d03e      	beq.n	8002708 <HAL_TIM_ConfigClockSource+0xd0>
 800268a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268e:	f200 8087 	bhi.w	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 8002692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002696:	f000 8085 	beq.w	80027a4 <HAL_TIM_ConfigClockSource+0x16c>
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269e:	d87f      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026a0:	2b70      	cmp	r3, #112	; 0x70
 80026a2:	d01a      	beq.n	80026da <HAL_TIM_ConfigClockSource+0xa2>
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d87b      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026a8:	2b60      	cmp	r3, #96	; 0x60
 80026aa:	d050      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x116>
 80026ac:	2b60      	cmp	r3, #96	; 0x60
 80026ae:	d877      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026b0:	2b50      	cmp	r3, #80	; 0x50
 80026b2:	d03c      	beq.n	800272e <HAL_TIM_ConfigClockSource+0xf6>
 80026b4:	2b50      	cmp	r3, #80	; 0x50
 80026b6:	d873      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026b8:	2b40      	cmp	r3, #64	; 0x40
 80026ba:	d058      	beq.n	800276e <HAL_TIM_ConfigClockSource+0x136>
 80026bc:	2b40      	cmp	r3, #64	; 0x40
 80026be:	d86f      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026c0:	2b30      	cmp	r3, #48	; 0x30
 80026c2:	d064      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x156>
 80026c4:	2b30      	cmp	r3, #48	; 0x30
 80026c6:	d86b      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d060      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x156>
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d867      	bhi.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05c      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x156>
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d05a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026d8:	e062      	b.n	80027a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	f000 f95c 	bl	80029a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	609a      	str	r2, [r3, #8]
      break;
 8002706:	e04e      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f000 f945 	bl	80029a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800272a:	609a      	str	r2, [r3, #8]
      break;
 800272c:	e03b      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 f8bc 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2150      	movs	r1, #80	; 0x50
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f913 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800274c:	e02b      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	6859      	ldr	r1, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	461a      	mov	r2, r3
 800275c:	f000 f8da 	bl	8002914 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2160      	movs	r1, #96	; 0x60
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f903 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800276c:	e01b      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6859      	ldr	r1, [r3, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	461a      	mov	r2, r3
 800277c:	f000 f89c 	bl	80028b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2140      	movs	r1, #64	; 0x40
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f8f3 	bl	8002972 <TIM_ITRx_SetConfig>
      break;
 800278c:	e00b      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f000 f8ea 	bl	8002972 <TIM_ITRx_SetConfig>
        break;
 800279e:	e002      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b083      	sub	sp, #12
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d007      	beq.n	8002830 <TIM_Base_SetConfig+0x28>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x28>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a22      	ldr	r2, [pc, #136]	; (80028b4 <TIM_Base_SetConfig+0xac>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d003      	beq.n	800285a <TIM_Base_SetConfig+0x52>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <TIM_Base_SetConfig+0xac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <TIM_Base_SetConfig+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	615a      	str	r2, [r3, #20]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400

080028b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	f023 0201 	bic.w	r2, r3, #1
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 030a 	bic.w	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	621a      	str	r2, [r3, #32]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	f023 0210 	bic.w	r2, r3, #16
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800293e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002950:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	621a      	str	r2, [r3, #32]
}
 8002968:	bf00      	nop
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	f043 0307 	orr.w	r3, r3, #7
 8002994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	021a      	lsls	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	609a      	str	r2, [r3, #8]
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e041      	b.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d009      	beq.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d004      	beq.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d10c      	bne.n	8002a6e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40012c00 	.word	0x40012c00
 8002a90:	40000400 	.word	0x40000400

08002a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <__libc_init_array>:
 8002ab8:	b570      	push	{r4, r5, r6, lr}
 8002aba:	2600      	movs	r6, #0
 8002abc:	4d0c      	ldr	r5, [pc, #48]	; (8002af0 <__libc_init_array+0x38>)
 8002abe:	4c0d      	ldr	r4, [pc, #52]	; (8002af4 <__libc_init_array+0x3c>)
 8002ac0:	1b64      	subs	r4, r4, r5
 8002ac2:	10a4      	asrs	r4, r4, #2
 8002ac4:	42a6      	cmp	r6, r4
 8002ac6:	d109      	bne.n	8002adc <__libc_init_array+0x24>
 8002ac8:	f000 f822 	bl	8002b10 <_init>
 8002acc:	2600      	movs	r6, #0
 8002ace:	4d0a      	ldr	r5, [pc, #40]	; (8002af8 <__libc_init_array+0x40>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	; (8002afc <__libc_init_array+0x44>)
 8002ad2:	1b64      	subs	r4, r4, r5
 8002ad4:	10a4      	asrs	r4, r4, #2
 8002ad6:	42a6      	cmp	r6, r4
 8002ad8:	d105      	bne.n	8002ae6 <__libc_init_array+0x2e>
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae0:	4798      	blx	r3
 8002ae2:	3601      	adds	r6, #1
 8002ae4:	e7ee      	b.n	8002ac4 <__libc_init_array+0xc>
 8002ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aea:	4798      	blx	r3
 8002aec:	3601      	adds	r6, #1
 8002aee:	e7f2      	b.n	8002ad6 <__libc_init_array+0x1e>
 8002af0:	08002b48 	.word	0x08002b48
 8002af4:	08002b48 	.word	0x08002b48
 8002af8:	08002b48 	.word	0x08002b48
 8002afc:	08002b4c 	.word	0x08002b4c

08002b00 <memset>:
 8002b00:	4603      	mov	r3, r0
 8002b02:	4402      	add	r2, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <_init>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	bf00      	nop
 8002b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b16:	bc08      	pop	{r3}
 8002b18:	469e      	mov	lr, r3
 8002b1a:	4770      	bx	lr

08002b1c <_fini>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr
