
MidTermExam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b34  08002b34  00012b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002b54  08002b54  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b54  08002b54  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000040  08002b9c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002b9c  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009163  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001abd  00000000  00000000  000291cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e36  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c14c  00000000  00000000  00042e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082098  00000000  00000000  0004ef92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d102a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002828  00000000  00000000  000d1080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b1c 	.word	0x08002b1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	08002b1c 	.word	0x08002b1c

0800014c <isButton_RESET_Pressed>:
int button_INC_LongPressed_flag = 0;
int button_DEC_LongPressed_flag = 0;


int isButton_RESET_Pressed()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_RESET_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton_RESET_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton_RESET_Pressed+0x16>
	{
		button_RESET_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton_RESET_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton_RESET_Pressed+0x18>
	}
	else return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000005c 	.word	0x2000005c

08000170 <isButton_INC_Pressed>:
int isButton_INC_Pressed()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_INC_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton_INC_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton_INC_Pressed+0x16>
	{
		button_INC_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton_INC_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton_INC_Pressed+0x18>
	}
	else return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000060 	.word	0x20000060

08000194 <isButton_DEC_Pressed>:
int isButton_DEC_Pressed()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_DEC_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton_DEC_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton_DEC_Pressed+0x16>
	{
		button_DEC_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton_DEC_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton_DEC_Pressed+0x18>
	}
	else return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000064 	.word	0x20000064

080001b8 <isButton_INC_LongPressed>:
		button_RESET_LongPressed_flag = 0;
		return 1;
	}
	else return 0;
}
int isButton_INC_LongPressed(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	if(button_INC_LongPressed_flag == 1){
 80001bc:	4b06      	ldr	r3, [pc, #24]	; (80001d8 <isButton_INC_LongPressed+0x20>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d104      	bne.n	80001ce <isButton_INC_LongPressed+0x16>
		button_INC_LongPressed_flag = 0;
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <isButton_INC_LongPressed+0x20>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
		return 1;
 80001ca:	2301      	movs	r3, #1
 80001cc:	e000      	b.n	80001d0 <isButton_INC_LongPressed+0x18>
	}
	else return 0;
 80001ce:	2300      	movs	r3, #0
}
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	2000006c 	.word	0x2000006c

080001dc <isButton_DEC_LongPressed>:
int isButton_DEC_LongPressed(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	if(button_DEC_LongPressed_flag == 1){
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <isButton_DEC_LongPressed+0x20>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b01      	cmp	r3, #1
 80001e6:	d104      	bne.n	80001f2 <isButton_DEC_LongPressed+0x16>
		button_DEC_LongPressed_flag = 0;
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <isButton_DEC_LongPressed+0x20>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
		return 1;
 80001ee:	2301      	movs	r3, #1
 80001f0:	e000      	b.n	80001f4 <isButton_DEC_LongPressed+0x18>
	}
	else return 0;
 80001f2:	2300      	movs	r3, #0
}
 80001f4:	4618      	mov	r0, r3
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	20000070 	.word	0x20000070

08000200 <getKeyInput>:

void getKeyInput()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000206:	2300      	movs	r3, #0
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	e13a      	b.n	8000482 <getKeyInput+0x282>
		keyReg0[i] = keyReg1[i];
 800020c:	4aa1      	ldr	r2, [pc, #644]	; (8000494 <getKeyInput+0x294>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000214:	49a0      	ldr	r1, [pc, #640]	; (8000498 <getKeyInput+0x298>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 800021c:	4a9f      	ldr	r2, [pc, #636]	; (800049c <getKeyInput+0x29c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000224:	499b      	ldr	r1, [pc, #620]	; (8000494 <getKeyInput+0x294>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(i == 0){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d154      	bne.n	80002dc <getKeyInput+0xdc>
			keyReg2[i] = HAL_GPIO_ReadPin(RESET_GPIO_Port, RESET_Pin);
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	489a      	ldr	r0, [pc, #616]	; (80004a0 <getKeyInput+0x2a0>)
 8000238:	f001 fc30 	bl	8001a9c <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	4619      	mov	r1, r3
 8000240:	4a96      	ldr	r2, [pc, #600]	; (800049c <getKeyInput+0x29c>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000248:	4a93      	ldr	r2, [pc, #588]	; (8000498 <getKeyInput+0x298>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	4990      	ldr	r1, [pc, #576]	; (8000494 <getKeyInput+0x294>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d13f      	bne.n	80002dc <getKeyInput+0xdc>
 800025c:	4a8d      	ldr	r2, [pc, #564]	; (8000494 <getKeyInput+0x294>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	498d      	ldr	r1, [pc, #564]	; (800049c <getKeyInput+0x29c>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d135      	bne.n	80002dc <getKeyInput+0xdc>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 8000270:	4a8c      	ldr	r2, [pc, #560]	; (80004a4 <getKeyInput+0x2a4>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4988      	ldr	r1, [pc, #544]	; (800049c <getKeyInput+0x29c>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d015      	beq.n	80002b0 <getKeyInput+0xb0>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 8000284:	4a85      	ldr	r2, [pc, #532]	; (800049c <getKeyInput+0x29c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	4985      	ldr	r1, [pc, #532]	; (80004a4 <getKeyInput+0x2a4>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000294:	4a81      	ldr	r2, [pc, #516]	; (800049c <getKeyInput+0x29c>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d11d      	bne.n	80002dc <getKeyInput+0xdc>
					{
						//TODO
						button_RESET_flag = 1;
 80002a0:	4b81      	ldr	r3, [pc, #516]	; (80004a8 <getKeyInput+0x2a8>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 80002a6:	4b81      	ldr	r3, [pc, #516]	; (80004ac <getKeyInput+0x2ac>)
 80002a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	e015      	b.n	80002dc <getKeyInput+0xdc>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 80002b0:	4a7a      	ldr	r2, [pc, #488]	; (800049c <getKeyInput+0x29c>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d10f      	bne.n	80002dc <getKeyInput+0xdc>
						timerForKeyPress--;
 80002bc:	4b7b      	ldr	r3, [pc, #492]	; (80004ac <getKeyInput+0x2ac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a7a      	ldr	r2, [pc, #488]	; (80004ac <getKeyInput+0x2ac>)
 80002c4:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 80002c6:	4b79      	ldr	r3, [pc, #484]	; (80004ac <getKeyInput+0x2ac>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d106      	bne.n	80002dc <getKeyInput+0xdc>
						{
							//TODO
							button_RESET_LongPressed_flag = 1;
 80002ce:	4b78      	ldr	r3, [pc, #480]	; (80004b0 <getKeyInput+0x2b0>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80002d4:	4b75      	ldr	r3, [pc, #468]	; (80004ac <getKeyInput+0x2ac>)
 80002d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002da:	601a      	str	r2, [r3, #0]

				}

			}
		}
		if(i == 1){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d164      	bne.n	80003ac <getKeyInput+0x1ac>
			keyReg0[i] = keyReg1[i];
 80002e2:	4a6c      	ldr	r2, [pc, #432]	; (8000494 <getKeyInput+0x294>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002ea:	496b      	ldr	r1, [pc, #428]	; (8000498 <getKeyInput+0x298>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg1[i] = keyReg2[i];
 80002f2:	4a6a      	ldr	r2, [pc, #424]	; (800049c <getKeyInput+0x29c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002fa:	4966      	ldr	r1, [pc, #408]	; (8000494 <getKeyInput+0x294>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg2[i] = HAL_GPIO_ReadPin(INC_GPIO_Port, INC_Pin);
 8000302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000306:	4866      	ldr	r0, [pc, #408]	; (80004a0 <getKeyInput+0x2a0>)
 8000308:	f001 fbc8 	bl	8001a9c <HAL_GPIO_ReadPin>
 800030c:	4603      	mov	r3, r0
 800030e:	4619      	mov	r1, r3
 8000310:	4a62      	ldr	r2, [pc, #392]	; (800049c <getKeyInput+0x29c>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000318:	4a5f      	ldr	r2, [pc, #380]	; (8000498 <getKeyInput+0x298>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000320:	495c      	ldr	r1, [pc, #368]	; (8000494 <getKeyInput+0x294>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000328:	429a      	cmp	r2, r3
 800032a:	d13f      	bne.n	80003ac <getKeyInput+0x1ac>
 800032c:	4a59      	ldr	r2, [pc, #356]	; (8000494 <getKeyInput+0x294>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000334:	4959      	ldr	r1, [pc, #356]	; (800049c <getKeyInput+0x29c>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800033c:	429a      	cmp	r2, r3
 800033e:	d135      	bne.n	80003ac <getKeyInput+0x1ac>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 8000340:	4a58      	ldr	r2, [pc, #352]	; (80004a4 <getKeyInput+0x2a4>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000348:	4954      	ldr	r1, [pc, #336]	; (800049c <getKeyInput+0x29c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000350:	429a      	cmp	r2, r3
 8000352:	d015      	beq.n	8000380 <getKeyInput+0x180>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 8000354:	4a51      	ldr	r2, [pc, #324]	; (800049c <getKeyInput+0x29c>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035c:	4951      	ldr	r1, [pc, #324]	; (80004a4 <getKeyInput+0x2a4>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000364:	4a4d      	ldr	r2, [pc, #308]	; (800049c <getKeyInput+0x29c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d11d      	bne.n	80003ac <getKeyInput+0x1ac>
					{
						//TODO
						button_INC_flag = 1;
 8000370:	4b50      	ldr	r3, [pc, #320]	; (80004b4 <getKeyInput+0x2b4>)
 8000372:	2201      	movs	r2, #1
 8000374:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000376:	4b4d      	ldr	r3, [pc, #308]	; (80004ac <getKeyInput+0x2ac>)
 8000378:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800037c:	601a      	str	r2, [r3, #0]
 800037e:	e015      	b.n	80003ac <getKeyInput+0x1ac>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 8000380:	4a46      	ldr	r2, [pc, #280]	; (800049c <getKeyInput+0x29c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10f      	bne.n	80003ac <getKeyInput+0x1ac>
						timerForKeyPress--;
 800038c:	4b47      	ldr	r3, [pc, #284]	; (80004ac <getKeyInput+0x2ac>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	3b01      	subs	r3, #1
 8000392:	4a46      	ldr	r2, [pc, #280]	; (80004ac <getKeyInput+0x2ac>)
 8000394:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000396:	4b45      	ldr	r3, [pc, #276]	; (80004ac <getKeyInput+0x2ac>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d106      	bne.n	80003ac <getKeyInput+0x1ac>
						{

							//TODO
							button_INC_LongPressed_flag = 1;
 800039e:	4b46      	ldr	r3, [pc, #280]	; (80004b8 <getKeyInput+0x2b8>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 80003a4:	4b41      	ldr	r3, [pc, #260]	; (80004ac <getKeyInput+0x2ac>)
 80003a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003aa:	601a      	str	r2, [r3, #0]

				}

			}
		}
		if(i == 2){
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d164      	bne.n	800047c <getKeyInput+0x27c>
			keyReg0[i] = keyReg1[i];
 80003b2:	4a38      	ldr	r2, [pc, #224]	; (8000494 <getKeyInput+0x294>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ba:	4937      	ldr	r1, [pc, #220]	; (8000498 <getKeyInput+0x298>)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg1[i] = keyReg2[i];
 80003c2:	4a36      	ldr	r2, [pc, #216]	; (800049c <getKeyInput+0x29c>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ca:	4932      	ldr	r1, [pc, #200]	; (8000494 <getKeyInput+0x294>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			keyReg2[i] = HAL_GPIO_ReadPin(DEC_GPIO_Port, DEC_Pin);
 80003d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d6:	4832      	ldr	r0, [pc, #200]	; (80004a0 <getKeyInput+0x2a0>)
 80003d8:	f001 fb60 	bl	8001a9c <HAL_GPIO_ReadPin>
 80003dc:	4603      	mov	r3, r0
 80003de:	4619      	mov	r1, r3
 80003e0:	4a2e      	ldr	r2, [pc, #184]	; (800049c <getKeyInput+0x29c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 80003e8:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <getKeyInput+0x298>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f0:	4928      	ldr	r1, [pc, #160]	; (8000494 <getKeyInput+0x294>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d13f      	bne.n	800047c <getKeyInput+0x27c>
 80003fc:	4a25      	ldr	r2, [pc, #148]	; (8000494 <getKeyInput+0x294>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000404:	4925      	ldr	r1, [pc, #148]	; (800049c <getKeyInput+0x29c>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800040c:	429a      	cmp	r2, r3
 800040e:	d135      	bne.n	800047c <getKeyInput+0x27c>
			{
				if(keyReg3[i] != keyReg2[i]) //trường hợp nhấn thả
 8000410:	4a24      	ldr	r2, [pc, #144]	; (80004a4 <getKeyInput+0x2a4>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000418:	4920      	ldr	r1, [pc, #128]	; (800049c <getKeyInput+0x29c>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000420:	429a      	cmp	r2, r3
 8000422:	d015      	beq.n	8000450 <getKeyInput+0x250>
				{
					keyReg3[i] = keyReg2[i]; // cập nhật lại keyReg3
 8000424:	4a1d      	ldr	r2, [pc, #116]	; (800049c <getKeyInput+0x29c>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <getKeyInput+0x2a4>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(keyReg2[i] == PRESSED_STATE)
 8000434:	4a19      	ldr	r2, [pc, #100]	; (800049c <getKeyInput+0x29c>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d11d      	bne.n	800047c <getKeyInput+0x27c>
					{
						//TODO
						button_DEC_flag = 1;
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <getKeyInput+0x2bc>)
 8000442:	2201      	movs	r2, #1
 8000444:	601a      	str	r2, [r3, #0]
						timerForKeyPress = 300;
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <getKeyInput+0x2ac>)
 8000448:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	e015      	b.n	800047c <getKeyInput+0x27c>
					}
				}
				else
				{// trường hợp nhấn đè
					if(keyReg2[i] == PRESSED_STATE){
 8000450:	4a12      	ldr	r2, [pc, #72]	; (800049c <getKeyInput+0x29c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10f      	bne.n	800047c <getKeyInput+0x27c>
						timerForKeyPress--;
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <getKeyInput+0x2ac>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	3b01      	subs	r3, #1
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <getKeyInput+0x2ac>)
 8000464:	6013      	str	r3, [r2, #0]
						if(timerForKeyPress == 0)
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <getKeyInput+0x2ac>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d106      	bne.n	800047c <getKeyInput+0x27c>
						{
							//TODO
							button_DEC_LongPressed_flag = 1;
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <getKeyInput+0x2c0>)
 8000470:	2201      	movs	r2, #1
 8000472:	601a      	str	r2, [r3, #0]
							timerForKeyPress = 300;
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <getKeyInput+0x2ac>)
 8000476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800047a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 3; i++){
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3301      	adds	r3, #1
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	2b02      	cmp	r3, #2
 8000486:	f77f aec1 	ble.w	800020c <getKeyInput+0xc>
				}
			}
		}

	}
}
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	2000000c 	.word	0x2000000c
 8000498:	20000000 	.word	0x20000000
 800049c:	20000018 	.word	0x20000018
 80004a0:	40010800 	.word	0x40010800
 80004a4:	20000024 	.word	0x20000024
 80004a8:	2000005c 	.word	0x2000005c
 80004ac:	20000030 	.word	0x20000030
 80004b0:	20000068 	.word	0x20000068
 80004b4:	20000060 	.word	0x20000060
 80004b8:	2000006c 	.word	0x2000006c
 80004bc:	20000064 	.word	0x20000064
 80004c0:	20000070 	.word	0x20000070

080004c4 <display7SEG>:

#include <control_led_7SEG.h>
#include "main.h"


void display7SEG(int num){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	if(num == 0)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d122      	bne.n	8000518 <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	48bd      	ldr	r0, [pc, #756]	; (80007cc <display7SEG+0x308>)
 80004d8:	f001 faf7 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2102      	movs	r1, #2
 80004e0:	48ba      	ldr	r0, [pc, #744]	; (80007cc <display7SEG+0x308>)
 80004e2:	f001 faf2 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2104      	movs	r1, #4
 80004ea:	48b8      	ldr	r0, [pc, #736]	; (80007cc <display7SEG+0x308>)
 80004ec:	f001 faed 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2108      	movs	r1, #8
 80004f4:	48b5      	ldr	r0, [pc, #724]	; (80007cc <display7SEG+0x308>)
 80004f6:	f001 fae8 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2110      	movs	r1, #16
 80004fe:	48b3      	ldr	r0, [pc, #716]	; (80007cc <display7SEG+0x308>)
 8000500:	f001 fae3 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2120      	movs	r1, #32
 8000508:	48b0      	ldr	r0, [pc, #704]	; (80007cc <display7SEG+0x308>)
 800050a:	f001 fade 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	48ae      	ldr	r0, [pc, #696]	; (80007cc <display7SEG+0x308>)
 8000514:	f001 fad9 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 1)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d122      	bne.n	8000564 <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	48aa      	ldr	r0, [pc, #680]	; (80007cc <display7SEG+0x308>)
 8000524:	f001 fad1 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2102      	movs	r1, #2
 800052c:	48a7      	ldr	r0, [pc, #668]	; (80007cc <display7SEG+0x308>)
 800052e:	f001 facc 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2104      	movs	r1, #4
 8000536:	48a5      	ldr	r0, [pc, #660]	; (80007cc <display7SEG+0x308>)
 8000538:	f001 fac7 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	48a2      	ldr	r0, [pc, #648]	; (80007cc <display7SEG+0x308>)
 8000542:	f001 fac2 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	48a0      	ldr	r0, [pc, #640]	; (80007cc <display7SEG+0x308>)
 800054c:	f001 fabd 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	489d      	ldr	r0, [pc, #628]	; (80007cc <display7SEG+0x308>)
 8000556:	f001 fab8 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	489b      	ldr	r0, [pc, #620]	; (80007cc <display7SEG+0x308>)
 8000560:	f001 fab3 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 2)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d122      	bne.n	80005b0 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	4897      	ldr	r0, [pc, #604]	; (80007cc <display7SEG+0x308>)
 8000570:	f001 faab 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2102      	movs	r1, #2
 8000578:	4894      	ldr	r0, [pc, #592]	; (80007cc <display7SEG+0x308>)
 800057a:	f001 faa6 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2104      	movs	r1, #4
 8000582:	4892      	ldr	r0, [pc, #584]	; (80007cc <display7SEG+0x308>)
 8000584:	f001 faa1 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	488f      	ldr	r0, [pc, #572]	; (80007cc <display7SEG+0x308>)
 800058e:	f001 fa9c 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2110      	movs	r1, #16
 8000596:	488d      	ldr	r0, [pc, #564]	; (80007cc <display7SEG+0x308>)
 8000598:	f001 fa97 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2120      	movs	r1, #32
 80005a0:	488a      	ldr	r0, [pc, #552]	; (80007cc <display7SEG+0x308>)
 80005a2:	f001 fa92 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2140      	movs	r1, #64	; 0x40
 80005aa:	4888      	ldr	r0, [pc, #544]	; (80007cc <display7SEG+0x308>)
 80005ac:	f001 fa8d 	bl	8001aca <HAL_GPIO_WritePin>

	}
	if(num == 3)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d122      	bne.n	80005fc <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	4884      	ldr	r0, [pc, #528]	; (80007cc <display7SEG+0x308>)
 80005bc:	f001 fa85 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2102      	movs	r1, #2
 80005c4:	4881      	ldr	r0, [pc, #516]	; (80007cc <display7SEG+0x308>)
 80005c6:	f001 fa80 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2104      	movs	r1, #4
 80005ce:	487f      	ldr	r0, [pc, #508]	; (80007cc <display7SEG+0x308>)
 80005d0:	f001 fa7b 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2108      	movs	r1, #8
 80005d8:	487c      	ldr	r0, [pc, #496]	; (80007cc <display7SEG+0x308>)
 80005da:	f001 fa76 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80005de:	2201      	movs	r2, #1
 80005e0:	2110      	movs	r1, #16
 80005e2:	487a      	ldr	r0, [pc, #488]	; (80007cc <display7SEG+0x308>)
 80005e4:	f001 fa71 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4877      	ldr	r0, [pc, #476]	; (80007cc <display7SEG+0x308>)
 80005ee:	f001 fa6c 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	4875      	ldr	r0, [pc, #468]	; (80007cc <display7SEG+0x308>)
 80005f8:	f001 fa67 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 4)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d122      	bne.n	8000648 <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	2101      	movs	r1, #1
 8000606:	4871      	ldr	r0, [pc, #452]	; (80007cc <display7SEG+0x308>)
 8000608:	f001 fa5f 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2102      	movs	r1, #2
 8000610:	486e      	ldr	r0, [pc, #440]	; (80007cc <display7SEG+0x308>)
 8000612:	f001 fa5a 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	486c      	ldr	r0, [pc, #432]	; (80007cc <display7SEG+0x308>)
 800061c:	f001 fa55 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2108      	movs	r1, #8
 8000624:	4869      	ldr	r0, [pc, #420]	; (80007cc <display7SEG+0x308>)
 8000626:	f001 fa50 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4867      	ldr	r0, [pc, #412]	; (80007cc <display7SEG+0x308>)
 8000630:	f001 fa4b 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	4864      	ldr	r0, [pc, #400]	; (80007cc <display7SEG+0x308>)
 800063a:	f001 fa46 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4862      	ldr	r0, [pc, #392]	; (80007cc <display7SEG+0x308>)
 8000644:	f001 fa41 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 5)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b05      	cmp	r3, #5
 800064c:	d122      	bne.n	8000694 <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	485e      	ldr	r0, [pc, #376]	; (80007cc <display7SEG+0x308>)
 8000654:	f001 fa39 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2102      	movs	r1, #2
 800065c:	485b      	ldr	r0, [pc, #364]	; (80007cc <display7SEG+0x308>)
 800065e:	f001 fa34 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2104      	movs	r1, #4
 8000666:	4859      	ldr	r0, [pc, #356]	; (80007cc <display7SEG+0x308>)
 8000668:	f001 fa2f 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2108      	movs	r1, #8
 8000670:	4856      	ldr	r0, [pc, #344]	; (80007cc <display7SEG+0x308>)
 8000672:	f001 fa2a 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2110      	movs	r1, #16
 800067a:	4854      	ldr	r0, [pc, #336]	; (80007cc <display7SEG+0x308>)
 800067c:	f001 fa25 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2120      	movs	r1, #32
 8000684:	4851      	ldr	r0, [pc, #324]	; (80007cc <display7SEG+0x308>)
 8000686:	f001 fa20 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2140      	movs	r1, #64	; 0x40
 800068e:	484f      	ldr	r0, [pc, #316]	; (80007cc <display7SEG+0x308>)
 8000690:	f001 fa1b 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2b06      	cmp	r3, #6
 8000698:	d122      	bne.n	80006e0 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2101      	movs	r1, #1
 800069e:	484b      	ldr	r0, [pc, #300]	; (80007cc <display7SEG+0x308>)
 80006a0:	f001 fa13 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2102      	movs	r1, #2
 80006a8:	4848      	ldr	r0, [pc, #288]	; (80007cc <display7SEG+0x308>)
 80006aa:	f001 fa0e 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2104      	movs	r1, #4
 80006b2:	4846      	ldr	r0, [pc, #280]	; (80007cc <display7SEG+0x308>)
 80006b4:	f001 fa09 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2108      	movs	r1, #8
 80006bc:	4843      	ldr	r0, [pc, #268]	; (80007cc <display7SEG+0x308>)
 80006be:	f001 fa04 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2110      	movs	r1, #16
 80006c6:	4841      	ldr	r0, [pc, #260]	; (80007cc <display7SEG+0x308>)
 80006c8:	f001 f9ff 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2120      	movs	r1, #32
 80006d0:	483e      	ldr	r0, [pc, #248]	; (80007cc <display7SEG+0x308>)
 80006d2:	f001 f9fa 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	483c      	ldr	r0, [pc, #240]	; (80007cc <display7SEG+0x308>)
 80006dc:	f001 f9f5 	bl	8001aca <HAL_GPIO_WritePin>

	}
	if(num == 7)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d122      	bne.n	800072c <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4838      	ldr	r0, [pc, #224]	; (80007cc <display7SEG+0x308>)
 80006ec:	f001 f9ed 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2102      	movs	r1, #2
 80006f4:	4835      	ldr	r0, [pc, #212]	; (80007cc <display7SEG+0x308>)
 80006f6:	f001 f9e8 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2104      	movs	r1, #4
 80006fe:	4833      	ldr	r0, [pc, #204]	; (80007cc <display7SEG+0x308>)
 8000700:	f001 f9e3 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	4830      	ldr	r0, [pc, #192]	; (80007cc <display7SEG+0x308>)
 800070a:	f001 f9de 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 800070e:	2201      	movs	r2, #1
 8000710:	2110      	movs	r1, #16
 8000712:	482e      	ldr	r0, [pc, #184]	; (80007cc <display7SEG+0x308>)
 8000714:	f001 f9d9 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2120      	movs	r1, #32
 800071c:	482b      	ldr	r0, [pc, #172]	; (80007cc <display7SEG+0x308>)
 800071e:	f001 f9d4 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	4829      	ldr	r0, [pc, #164]	; (80007cc <display7SEG+0x308>)
 8000728:	f001 f9cf 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 8)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d122      	bne.n	8000778 <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2101      	movs	r1, #1
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <display7SEG+0x308>)
 8000738:	f001 f9c7 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2102      	movs	r1, #2
 8000740:	4822      	ldr	r0, [pc, #136]	; (80007cc <display7SEG+0x308>)
 8000742:	f001 f9c2 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2104      	movs	r1, #4
 800074a:	4820      	ldr	r0, [pc, #128]	; (80007cc <display7SEG+0x308>)
 800074c:	f001 f9bd 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2108      	movs	r1, #8
 8000754:	481d      	ldr	r0, [pc, #116]	; (80007cc <display7SEG+0x308>)
 8000756:	f001 f9b8 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2110      	movs	r1, #16
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <display7SEG+0x308>)
 8000760:	f001 f9b3 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2120      	movs	r1, #32
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <display7SEG+0x308>)
 800076a:	f001 f9ae 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2140      	movs	r1, #64	; 0x40
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <display7SEG+0x308>)
 8000774:	f001 f9a9 	bl	8001aca <HAL_GPIO_WritePin>
	}
	if(num == 9)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b09      	cmp	r3, #9
 800077c:	d122      	bne.n	80007c4 <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2101      	movs	r1, #1
 8000782:	4812      	ldr	r0, [pc, #72]	; (80007cc <display7SEG+0x308>)
 8000784:	f001 f9a1 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2102      	movs	r1, #2
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <display7SEG+0x308>)
 800078e:	f001 f99c 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2104      	movs	r1, #4
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <display7SEG+0x308>)
 8000798:	f001 f997 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	480a      	ldr	r0, [pc, #40]	; (80007cc <display7SEG+0x308>)
 80007a2:	f001 f992 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2110      	movs	r1, #16
 80007aa:	4808      	ldr	r0, [pc, #32]	; (80007cc <display7SEG+0x308>)
 80007ac:	f001 f98d 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <display7SEG+0x308>)
 80007b6:	f001 f988 	bl	8001aca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2140      	movs	r1, #64	; 0x40
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <display7SEG+0x308>)
 80007c0:	f001 f983 	bl	8001aca <HAL_GPIO_WritePin>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <fsm_count_down_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"

void fsm_count_down_run(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	switch(status){
 80007d4:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <fsm_count_down_run+0x170>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b0c      	cmp	r3, #12
 80007da:	f040 80ac 	bne.w	8000936 <fsm_count_down_run+0x166>
		case COUNT_DOWN:
			if(counter != 0){
 80007de:	4b59      	ldr	r3, [pc, #356]	; (8000944 <fsm_count_down_run+0x174>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d011      	beq.n	800080a <fsm_count_down_run+0x3a>
				if(timer3_flag == 1){
 80007e6:	4b58      	ldr	r3, [pc, #352]	; (8000948 <fsm_count_down_run+0x178>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10d      	bne.n	800080a <fsm_count_down_run+0x3a>
					counter--;
 80007ee:	4b55      	ldr	r3, [pc, #340]	; (8000944 <fsm_count_down_run+0x174>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	4a53      	ldr	r2, [pc, #332]	; (8000944 <fsm_count_down_run+0x174>)
 80007f6:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 80007f8:	4b52      	ldr	r3, [pc, #328]	; (8000944 <fsm_count_down_run+0x174>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe61 	bl	80004c4 <display7SEG>
					setTimer3(1000);
 8000802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000806:	f000 fd4d 	bl	80012a4 <setTimer3>
				}
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 800080a:	f7ff fc9f 	bl	800014c <isButton_RESET_Pressed>
 800080e:	4603      	mov	r3, r0
 8000810:	2b01      	cmp	r3, #1
 8000812:	d106      	bne.n	8000822 <fsm_count_down_run+0x52>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000814:	f242 7010 	movw	r0, #10000	; 0x2710
 8000818:	f000 fd44 	bl	80012a4 <setTimer3>
				status = reset;
 800081c:	4b48      	ldr	r3, [pc, #288]	; (8000940 <fsm_count_down_run+0x170>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000822:	f7ff fcb7 	bl	8000194 <isButton_DEC_Pressed>
 8000826:	4603      	mov	r3, r0
 8000828:	2b01      	cmp	r3, #1
 800082a:	d118      	bne.n	800085e <fsm_count_down_run+0x8e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 800082c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000830:	f000 fd38 	bl	80012a4 <setTimer3>
				if(counter == 1){
 8000834:	4b43      	ldr	r3, [pc, #268]	; (8000944 <fsm_count_down_run+0x174>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d103      	bne.n	8000844 <fsm_count_down_run+0x74>
					status = reset;
 800083c:	4b40      	ldr	r3, [pc, #256]	; (8000940 <fsm_count_down_run+0x170>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e00c      	b.n	800085e <fsm_count_down_run+0x8e>
				}
				else{
					counter --;
 8000844:	4b3f      	ldr	r3, [pc, #252]	; (8000944 <fsm_count_down_run+0x174>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <fsm_count_down_run+0x174>)
 800084c:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <fsm_count_down_run+0x174>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe36 	bl	80004c4 <display7SEG>
					status = DECREASE;
 8000858:	4b39      	ldr	r3, [pc, #228]	; (8000940 <fsm_count_down_run+0x170>)
 800085a:	2203      	movs	r2, #3
 800085c:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 800085e:	f7ff fc87 	bl	8000170 <isButton_INC_Pressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b01      	cmp	r3, #1
 8000866:	d120      	bne.n	80008aa <fsm_count_down_run+0xda>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000868:	f242 7010 	movw	r0, #10000	; 0x2710
 800086c:	f000 fd1a 	bl	80012a4 <setTimer3>
				if(counter == 8){
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <fsm_count_down_run+0x174>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b08      	cmp	r3, #8
 8000876:	d10b      	bne.n	8000890 <fsm_count_down_run+0xc0>
					counter = 9;
 8000878:	4b32      	ldr	r3, [pc, #200]	; (8000944 <fsm_count_down_run+0x174>)
 800087a:	2209      	movs	r2, #9
 800087c:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <fsm_count_down_run+0x174>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe1e 	bl	80004c4 <display7SEG>
					status = VALUE_MAX;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <fsm_count_down_run+0x170>)
 800088a:	2204      	movs	r2, #4
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	e00c      	b.n	80008aa <fsm_count_down_run+0xda>
				}
				else{
					counter ++;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <fsm_count_down_run+0x174>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <fsm_count_down_run+0x174>)
 8000898:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <fsm_count_down_run+0x174>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe10 	bl	80004c4 <display7SEG>
					status = INCREASE;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <fsm_count_down_run+0x170>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	601a      	str	r2, [r3, #0]
				}
			}


			// chuyển về trạng thái nhấn đè
			if(isButton_INC_LongPressed() == 1){
 80008aa:	f7ff fc85 	bl	80001b8 <isButton_INC_LongPressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d11c      	bne.n	80008ee <fsm_count_down_run+0x11e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80008b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80008b8:	f000 fcf4 	bl	80012a4 <setTimer3>
				if(timer2_flag == 1){
 80008bc:	4b23      	ldr	r3, [pc, #140]	; (800094c <fsm_count_down_run+0x17c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d114      	bne.n	80008ee <fsm_count_down_run+0x11e>
					counter++;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <fsm_count_down_run+0x174>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <fsm_count_down_run+0x174>)
 80008cc:	6013      	str	r3, [r2, #0]
					if (counter == 10) counter = 0;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <fsm_count_down_run+0x174>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2b0a      	cmp	r3, #10
 80008d4:	d102      	bne.n	80008dc <fsm_count_down_run+0x10c>
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <fsm_count_down_run+0x174>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <fsm_count_down_run+0x174>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fdef 	bl	80004c4 <display7SEG>
					setTimer2(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fcbf 	bl	800126c <setTimer2>
				}
			}
			if(isButton_DEC_LongPressed() == 1){
 80008ee:	f7ff fc75 	bl	80001dc <isButton_DEC_LongPressed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d120      	bne.n	800093a <fsm_count_down_run+0x16a>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80008f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80008fc:	f000 fcd2 	bl	80012a4 <setTimer3>
				if(timer2_flag == 1){
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <fsm_count_down_run+0x17c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d118      	bne.n	800093a <fsm_count_down_run+0x16a>
					counter--;
 8000908:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <fsm_count_down_run+0x174>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3b01      	subs	r3, #1
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <fsm_count_down_run+0x174>)
 8000910:	6013      	str	r3, [r2, #0]
					if(counter == -1) counter = 9;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <fsm_count_down_run+0x174>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091a:	d102      	bne.n	8000922 <fsm_count_down_run+0x152>
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <fsm_count_down_run+0x174>)
 800091e:	2209      	movs	r2, #9
 8000920:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <fsm_count_down_run+0x174>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fdcc 	bl	80004c4 <display7SEG>
					setTimer2(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f000 fc9c 	bl	800126c <setTimer2>
				}
			}
			break;
 8000934:	e001      	b.n	800093a <fsm_count_down_run+0x16a>
		default:
			break;
 8000936:	bf00      	nop
 8000938:	e000      	b.n	800093c <fsm_count_down_run+0x16c>
			break;
 800093a:	bf00      	nop
	}
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000074 	.word	0x20000074
 8000944:	20000078 	.word	0x20000078
 8000948:	20000090 	.word	0x20000090
 800094c:	20000088 	.word	0x20000088

08000950 <fsm_long_press_run>:
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"


void fsm_long_press_run(){
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	switch(status){
 8000954:	4ba8      	ldr	r3, [pc, #672]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b0a      	cmp	r3, #10
 800095a:	f000 80a5 	beq.w	8000aa8 <fsm_long_press_run+0x158>
 800095e:	2b0b      	cmp	r3, #11
 8000960:	f040 8147 	bne.w	8000bf2 <fsm_long_press_run+0x2a2>
		case LONG_INC:
			display7SEG(counter);
 8000964:	4ba5      	ldr	r3, [pc, #660]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdab 	bl	80004c4 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 800096e:	4ba4      	ldr	r3, [pc, #656]	; (8000c00 <fsm_long_press_run+0x2b0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d114      	bne.n	80009a0 <fsm_long_press_run+0x50>
				setTimer3(1000);
 8000976:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097a:	f000 fc93 	bl	80012a4 <setTimer3>
				if(counter != 0){
 800097e:	4b9f      	ldr	r3, [pc, #636]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d004      	beq.n	8000990 <fsm_long_press_run+0x40>
					counter--;
 8000986:	4b9d      	ldr	r3, [pc, #628]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	3b01      	subs	r3, #1
 800098c:	4a9b      	ldr	r2, [pc, #620]	; (8000bfc <fsm_long_press_run+0x2ac>)
 800098e:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000990:	4b9a      	ldr	r3, [pc, #616]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fd95 	bl	80004c4 <display7SEG>
				status = COUNT_DOWN;
 800099a:	4b97      	ldr	r3, [pc, #604]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 800099c:	220c      	movs	r2, #12
 800099e:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_LongPressed() == 1){
 80009a0:	f7ff fc0a 	bl	80001b8 <isButton_INC_LongPressed>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d11c      	bne.n	80009e4 <fsm_long_press_run+0x94>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80009aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80009ae:	f000 fc79 	bl	80012a4 <setTimer3>
				if(timer2_flag == 1){
 80009b2:	4b94      	ldr	r3, [pc, #592]	; (8000c04 <fsm_long_press_run+0x2b4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d114      	bne.n	80009e4 <fsm_long_press_run+0x94>
					counter++;
 80009ba:	4b90      	ldr	r3, [pc, #576]	; (8000bfc <fsm_long_press_run+0x2ac>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	3301      	adds	r3, #1
 80009c0:	4a8e      	ldr	r2, [pc, #568]	; (8000bfc <fsm_long_press_run+0x2ac>)
 80009c2:	6013      	str	r3, [r2, #0]
					if (counter == 10) counter = 0;
 80009c4:	4b8d      	ldr	r3, [pc, #564]	; (8000bfc <fsm_long_press_run+0x2ac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b0a      	cmp	r3, #10
 80009ca:	d102      	bne.n	80009d2 <fsm_long_press_run+0x82>
 80009cc:	4b8b      	ldr	r3, [pc, #556]	; (8000bfc <fsm_long_press_run+0x2ac>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 80009d2:	4b8a      	ldr	r3, [pc, #552]	; (8000bfc <fsm_long_press_run+0x2ac>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fd74 	bl	80004c4 <display7SEG>
					setTimer2(1000);
 80009dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e0:	f000 fc44 	bl	800126c <setTimer2>
				}
			}

			if(isButton_DEC_LongPressed() == 1){
 80009e4:	f7ff fbfa 	bl	80001dc <isButton_DEC_LongPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10a      	bne.n	8000a04 <fsm_long_press_run+0xb4>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 80009ee:	f242 7010 	movw	r0, #10000	; 0x2710
 80009f2:	f000 fc57 	bl	80012a4 <setTimer3>
				status = LONG_DEC;
 80009f6:	4b80      	ldr	r3, [pc, #512]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 80009f8:	220a      	movs	r2, #10
 80009fa:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 80009fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a00:	f000 fc34 	bl	800126c <setTimer2>
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 8000a04:	f7ff fba2 	bl	800014c <isButton_RESET_Pressed>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d106      	bne.n	8000a1c <fsm_long_press_run+0xcc>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a0e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a12:	f000 fc47 	bl	80012a4 <setTimer3>
				status = reset;
 8000a16:	4b78      	ldr	r3, [pc, #480]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000a1c:	f7ff fbba 	bl	8000194 <isButton_DEC_Pressed>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d118      	bne.n	8000a58 <fsm_long_press_run+0x108>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a26:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a2a:	f000 fc3b 	bl	80012a4 <setTimer3>
				if(counter == 1){
 8000a2e:	4b73      	ldr	r3, [pc, #460]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d103      	bne.n	8000a3e <fsm_long_press_run+0xee>
					status = reset;
 8000a36:	4b70      	ldr	r3, [pc, #448]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e00c      	b.n	8000a58 <fsm_long_press_run+0x108>
				}
				else{
					counter --;
 8000a3e:	4b6f      	ldr	r3, [pc, #444]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	4a6d      	ldr	r2, [pc, #436]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a46:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000a48:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fd39 	bl	80004c4 <display7SEG>
					status = DECREASE;
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000a54:	2203      	movs	r2, #3
 8000a56:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 8000a58:	f7ff fb8a 	bl	8000170 <isButton_INC_Pressed>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	f040 80c4 	bne.w	8000bec <fsm_long_press_run+0x29c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000a64:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a68:	f000 fc1c 	bl	80012a4 <setTimer3>
				if(counter == 8){
 8000a6c:	4b63      	ldr	r3, [pc, #396]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d10b      	bne.n	8000a8c <fsm_long_press_run+0x13c>
					counter = 9;
 8000a74:	4b61      	ldr	r3, [pc, #388]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a76:	2209      	movs	r2, #9
 8000a78:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000a7a:	4b60      	ldr	r3, [pc, #384]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fd20 	bl	80004c4 <display7SEG>
					status = VALUE_MAX;
 8000a84:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000a86:	2204      	movs	r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
					status = INCREASE;
				}
			}

			break;
 8000a8a:	e0af      	b.n	8000bec <fsm_long_press_run+0x29c>
					counter ++;
 8000a8c:	4b5b      	ldr	r3, [pc, #364]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a5a      	ldr	r2, [pc, #360]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a94:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000a96:	4b59      	ldr	r3, [pc, #356]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd12 	bl	80004c4 <display7SEG>
					status = INCREASE;
 8000aa0:	4b55      	ldr	r3, [pc, #340]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	601a      	str	r2, [r3, #0]
			break;
 8000aa6:	e0a1      	b.n	8000bec <fsm_long_press_run+0x29c>
		case LONG_DEC:
			display7SEG(counter);
 8000aa8:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd09 	bl	80004c4 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000ab2:	4b53      	ldr	r3, [pc, #332]	; (8000c00 <fsm_long_press_run+0x2b0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d114      	bne.n	8000ae4 <fsm_long_press_run+0x194>
				setTimer3(1000);
 8000aba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abe:	f000 fbf1 	bl	80012a4 <setTimer3>
				if(counter != 0){
 8000ac2:	4b4e      	ldr	r3, [pc, #312]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d004      	beq.n	8000ad4 <fsm_long_press_run+0x184>
					counter--;
 8000aca:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a4a      	ldr	r2, [pc, #296]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000ad2:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000ad4:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fcf3 	bl	80004c4 <display7SEG>
				status = COUNT_DOWN;
 8000ade:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	601a      	str	r2, [r3, #0]
			}


			if(isButton_DEC_LongPressed() == 1){
 8000ae4:	f7ff fb7a 	bl	80001dc <isButton_DEC_LongPressed>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11d      	bne.n	8000b2a <fsm_long_press_run+0x1da>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000aee:	f242 7010 	movw	r0, #10000	; 0x2710
 8000af2:	f000 fbd7 	bl	80012a4 <setTimer3>
				if(timer2_flag == 1){
 8000af6:	4b43      	ldr	r3, [pc, #268]	; (8000c04 <fsm_long_press_run+0x2b4>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d115      	bne.n	8000b2a <fsm_long_press_run+0x1da>
					counter--;
 8000afe:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	4a3d      	ldr	r2, [pc, #244]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b06:	6013      	str	r3, [r2, #0]
					if(counter == -1) counter = 9;
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b10:	d102      	bne.n	8000b18 <fsm_long_press_run+0x1c8>
 8000b12:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b14:	2209      	movs	r2, #9
 8000b16:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fcd1 	bl	80004c4 <display7SEG>
					setTimer2(1000);
 8000b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b26:	f000 fba1 	bl	800126c <setTimer2>
				}
			}
			if(isButton_INC_LongPressed() == 1){
 8000b2a:	f7ff fb45 	bl	80001b8 <isButton_INC_LongPressed>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10a      	bne.n	8000b4a <fsm_long_press_run+0x1fa>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b34:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b38:	f000 fbb4 	bl	80012a4 <setTimer3>
				status = LONG_INC;
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000b3e:	220b      	movs	r2, #11
 8000b40:	601a      	str	r2, [r3, #0]
				setTimer2(1000);
 8000b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b46:	f000 fb91 	bl	800126c <setTimer2>
			}

			// chuyển về trạng thái nhấn thả
			if(isButton_RESET_Pressed() == 1){
 8000b4a:	f7ff faff 	bl	800014c <isButton_RESET_Pressed>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d106      	bne.n	8000b62 <fsm_long_press_run+0x212>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b54:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b58:	f000 fba4 	bl	80012a4 <setTimer3>
				status = reset;
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000b62:	f7ff fb17 	bl	8000194 <isButton_DEC_Pressed>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d118      	bne.n	8000b9e <fsm_long_press_run+0x24e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000b6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b70:	f000 fb98 	bl	80012a4 <setTimer3>
				if(counter == 1){
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d103      	bne.n	8000b84 <fsm_long_press_run+0x234>
					status = reset;
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e00c      	b.n	8000b9e <fsm_long_press_run+0x24e>
				}
				else{
					counter --;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b8c:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc96 	bl	80004c4 <display7SEG>
					status = DECREASE;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_INC_Pressed() == 1){
 8000b9e:	f7ff fae7 	bl	8000170 <isButton_INC_Pressed>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d123      	bne.n	8000bf0 <fsm_long_press_run+0x2a0>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000ba8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000bac:	f000 fb7a 	bl	80012a4 <setTimer3>
				if(counter == 8){
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d10b      	bne.n	8000bd0 <fsm_long_press_run+0x280>
					counter = 9;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bba:	2209      	movs	r2, #9
 8000bbc:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc7e 	bl	80004c4 <display7SEG>
					status = VALUE_MAX;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
					display7SEG(counter);
					status = INCREASE;
				}
			}

			break;
 8000bce:	e00f      	b.n	8000bf0 <fsm_long_press_run+0x2a0>
					counter ++;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bd8:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <fsm_long_press_run+0x2ac>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fc70 	bl	80004c4 <display7SEG>
					status = INCREASE;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <fsm_long_press_run+0x2a8>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	601a      	str	r2, [r3, #0]
			break;
 8000bea:	e001      	b.n	8000bf0 <fsm_long_press_run+0x2a0>
			break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <fsm_long_press_run+0x2a2>
			break;
 8000bf0:	bf00      	nop
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000074 	.word	0x20000074
 8000bfc:	20000078 	.word	0x20000078
 8000c00:	20000090 	.word	0x20000090
 8000c04:	20000088 	.word	0x20000088

08000c08 <fsm_simple_buttons_run>:
#include "software_timer.h"
#include "button.h"
#include "main.h"
#include "control_led_7SEG.h"

void fsm_simple_buttons_run(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	switch(status)
 8000c0c:	4b96      	ldr	r3, [pc, #600]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b04      	cmp	r3, #4
 8000c12:	f200 81d0 	bhi.w	8000fb6 <fsm_simple_buttons_run+0x3ae>
 8000c16:	a201      	add	r2, pc, #4	; (adr r2, 8000c1c <fsm_simple_buttons_run+0x14>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c31 	.word	0x08000c31
 8000c20:	08000c39 	.word	0x08000c39
 8000c24:	08000cc1 	.word	0x08000cc1
 8000c28:	08000dd1 	.word	0x08000dd1
 8000c2c:	08000ee3 	.word	0x08000ee3
	{
		case INIT:
			status = reset;
 8000c30:	4b8d      	ldr	r3, [pc, #564]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	601a      	str	r2, [r3, #0]
			break;
 8000c36:	e1c7      	b.n	8000fc8 <fsm_simple_buttons_run+0x3c0>
		case reset:
			counter = 0;
 8000c38:	4b8c      	ldr	r3, [pc, #560]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
			display7SEG(counter);
 8000c3e:	4b8b      	ldr	r3, [pc, #556]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc3e 	bl	80004c4 <display7SEG>
			if(isButton_RESET_Pressed() == 1) status = reset;
 8000c48:	f7ff fa80 	bl	800014c <isButton_RESET_Pressed>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d102      	bne.n	8000c58 <fsm_simple_buttons_run+0x50>
 8000c52:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
			if(isButton_DEC_Pressed() == 1){
 8000c58:	f7ff fa9c 	bl	8000194 <isButton_DEC_Pressed>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d105      	bne.n	8000c6e <fsm_simple_buttons_run+0x66>
				counter = 9;
 8000c62:	4b82      	ldr	r3, [pc, #520]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c64:	2209      	movs	r2, #9
 8000c66:	601a      	str	r2, [r3, #0]
				status = VALUE_MAX;
 8000c68:	4b7f      	ldr	r3, [pc, #508]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_Pressed() == 1) {
 8000c6e:	f7ff fa7f 	bl	8000170 <isButton_INC_Pressed>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d107      	bne.n	8000c88 <fsm_simple_buttons_run+0x80>
				counter ++;
 8000c78:	4b7c      	ldr	r3, [pc, #496]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	4a7b      	ldr	r2, [pc, #492]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c80:	6013      	str	r3, [r2, #0]
				status = INCREASE;
 8000c82:	4b79      	ldr	r3, [pc, #484]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c84:	2202      	movs	r2, #2
 8000c86:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000c88:	f7ff faa8 	bl	80001dc <isButton_DEC_LongPressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d107      	bne.n	8000ca2 <fsm_simple_buttons_run+0x9a>
				counter--;
 8000c92:	4b76      	ldr	r3, [pc, #472]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a74      	ldr	r2, [pc, #464]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000c9a:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000c9c:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000ca2:	f7ff fa89 	bl	80001b8 <isButton_INC_LongPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	f040 8186 	bne.w	8000fba <fsm_simple_buttons_run+0x3b2>
				counter++;
 8000cae:	4b6f      	ldr	r3, [pc, #444]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a6d      	ldr	r2, [pc, #436]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cb6:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000cb8:	4b6b      	ldr	r3, [pc, #428]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000cba:	220b      	movs	r2, #11
 8000cbc:	601a      	str	r2, [r3, #0]
			}
			break;
 8000cbe:	e17c      	b.n	8000fba <fsm_simple_buttons_run+0x3b2>
		case INCREASE:
			display7SEG(counter);
 8000cc0:	4b6a      	ldr	r3, [pc, #424]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fbfd 	bl	80004c4 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <fsm_simple_buttons_run+0x268>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d114      	bne.n	8000cfc <fsm_simple_buttons_run+0xf4>
				setTimer3(1000);
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f000 fae5 	bl	80012a4 <setTimer3>
				if(counter != 0){
 8000cda:	4b64      	ldr	r3, [pc, #400]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d004      	beq.n	8000cec <fsm_simple_buttons_run+0xe4>
					counter--;
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	4a60      	ldr	r2, [pc, #384]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cea:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000cec:	4b5f      	ldr	r3, [pc, #380]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fbe7 	bl	80004c4 <display7SEG>
				status = COUNT_DOWN;
 8000cf6:	4b5c      	ldr	r3, [pc, #368]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000cf8:	220c      	movs	r2, #12
 8000cfa:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000cfc:	f7ff fa38 	bl	8000170 <isButton_INC_Pressed>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d11b      	bne.n	8000d3e <fsm_simple_buttons_run+0x136>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d06:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d0a:	f000 facb 	bl	80012a4 <setTimer3>
				if(counter == 8){
 8000d0e:	4b57      	ldr	r3, [pc, #348]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d106      	bne.n	8000d24 <fsm_simple_buttons_run+0x11c>
					counter = 9;
 8000d16:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d18:	2209      	movs	r2, #9
 8000d1a:	601a      	str	r2, [r3, #0]
					status = VALUE_MAX;
 8000d1c:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e00c      	b.n	8000d3e <fsm_simple_buttons_run+0x136>
				}
				else{
					counter ++;
 8000d24:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d2c:	6013      	str	r3, [r2, #0]
					display7SEG(counter);
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fbc6 	bl	80004c4 <display7SEG>
					status = INCREASE;
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
				}

			}
			if(isButton_DEC_Pressed() == 1){
 8000d3e:	f7ff fa29 	bl	8000194 <isButton_DEC_Pressed>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d113      	bne.n	8000d70 <fsm_simple_buttons_run+0x168>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d48:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d4c:	f000 faaa 	bl	80012a4 <setTimer3>
				if(counter == 1){
 8000d50:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d103      	bne.n	8000d60 <fsm_simple_buttons_run+0x158>
					status = reset;
 8000d58:	4b43      	ldr	r3, [pc, #268]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	e007      	b.n	8000d70 <fsm_simple_buttons_run+0x168>
				}
				else{
					counter --;
 8000d60:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d68:	6013      	str	r3, [r2, #0]
					status = DECREASE;
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_RESET_Pressed() == 1){
 8000d70:	f7ff f9ec 	bl	800014c <isButton_RESET_Pressed>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d106      	bne.n	8000d88 <fsm_simple_buttons_run+0x180>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d7e:	f000 fa91 	bl	80012a4 <setTimer3>
				status = reset;
 8000d82:	4b39      	ldr	r3, [pc, #228]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000d88:	f7ff fa28 	bl	80001dc <isButton_DEC_LongPressed>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d10b      	bne.n	8000daa <fsm_simple_buttons_run+0x1a2>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000d92:	f242 7010 	movw	r0, #10000	; 0x2710
 8000d96:	f000 fa85 	bl	80012a4 <setTimer3>
				counter--;
 8000d9a:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000da2:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000da6:	220a      	movs	r2, #10
 8000da8:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000daa:	f7ff fa05 	bl	80001b8 <isButton_INC_LongPressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	f040 8104 	bne.w	8000fbe <fsm_simple_buttons_run+0x3b6>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000db6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dba:	f000 fa73 	bl	80012a4 <setTimer3>
				counter++;
 8000dbe:	4b2b      	ldr	r3, [pc, #172]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dc6:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000dca:	220b      	movs	r2, #11
 8000dcc:	601a      	str	r2, [r3, #0]
			}

			break;
 8000dce:	e0f6      	b.n	8000fbe <fsm_simple_buttons_run+0x3b6>
		case DECREASE:
			display7SEG(counter);
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb75 	bl	80004c4 <display7SEG>

			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000dda:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <fsm_simple_buttons_run+0x268>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d114      	bne.n	8000e0c <fsm_simple_buttons_run+0x204>
				setTimer3(1000);
 8000de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de6:	f000 fa5d 	bl	80012a4 <setTimer3>
				if(counter != 0){
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d004      	beq.n	8000dfc <fsm_simple_buttons_run+0x1f4>
					counter--;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dfa:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fb5f 	bl	80004c4 <display7SEG>
				status = COUNT_DOWN;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000e0c:	f7ff f9b0 	bl	8000170 <isButton_INC_Pressed>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d116      	bne.n	8000e44 <fsm_simple_buttons_run+0x23c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e16:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e1a:	f000 fa43 	bl	80012a4 <setTimer3>
				if(counter == 8){
 8000e1e:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d106      	bne.n	8000e34 <fsm_simple_buttons_run+0x22c>
					counter = 9;
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000e28:	2209      	movs	r2, #9
 8000e2a:	601a      	str	r2, [r3, #0]
					status = VALUE_MAX;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e007      	b.n	8000e44 <fsm_simple_buttons_run+0x23c>
				}
				else{
					counter++;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	4a0c      	ldr	r2, [pc, #48]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000e3c:	6013      	str	r3, [r2, #0]
					status = INCREASE;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButton_DEC_Pressed() == 1){
 8000e44:	f7ff f9a6 	bl	8000194 <isButton_DEC_Pressed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d11a      	bne.n	8000e84 <fsm_simple_buttons_run+0x27c>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e4e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e52:	f000 fa27 	bl	80012a4 <setTimer3>
				if(counter == 1){
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <fsm_simple_buttons_run+0x264>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d10a      	bne.n	8000e74 <fsm_simple_buttons_run+0x26c>
					status = reset;
 8000e5e:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <fsm_simple_buttons_run+0x260>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	e00e      	b.n	8000e84 <fsm_simple_buttons_run+0x27c>
 8000e66:	bf00      	nop
 8000e68:	20000074 	.word	0x20000074
 8000e6c:	20000078 	.word	0x20000078
 8000e70:	20000090 	.word	0x20000090
				}
				else{
					counter--;
 8000e74:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000e7c:	6013      	str	r3, [r2, #0]
					status = DECREASE;
 8000e7e:	4b54      	ldr	r3, [pc, #336]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000e80:	2203      	movs	r2, #3
 8000e82:	601a      	str	r2, [r3, #0]
				}

			}
			if(isButton_RESET_Pressed() == 1){
 8000e84:	f7ff f962 	bl	800014c <isButton_RESET_Pressed>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d106      	bne.n	8000e9c <fsm_simple_buttons_run+0x294>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000e8e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000e92:	f000 fa07 	bl	80012a4 <setTimer3>
				status = reset;
 8000e96:	4b4e      	ldr	r3, [pc, #312]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000e9c:	f7ff f99e 	bl	80001dc <isButton_DEC_LongPressed>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10b      	bne.n	8000ebe <fsm_simple_buttons_run+0x2b6>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000ea6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000eaa:	f000 f9fb 	bl	80012a4 <setTimer3>
				counter--;
 8000eae:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000eb6:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000eb8:	4b45      	ldr	r3, [pc, #276]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000eba:	220a      	movs	r2, #10
 8000ebc:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000ebe:	f7ff f97b 	bl	80001b8 <isButton_INC_LongPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d17c      	bne.n	8000fc2 <fsm_simple_buttons_run+0x3ba>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000ec8:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ecc:	f000 f9ea 	bl	80012a4 <setTimer3>
				counter++;
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000ed8:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000edc:	220b      	movs	r2, #11
 8000ede:	601a      	str	r2, [r3, #0]
			}

			break;
 8000ee0:	e06f      	b.n	8000fc2 <fsm_simple_buttons_run+0x3ba>
		case VALUE_MAX:
			display7SEG(counter);
 8000ee2:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff faec 	bl	80004c4 <display7SEG>
			// chuyển về trạng thái countDown
			if(timer3_flag == 1) {
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <fsm_simple_buttons_run+0x3cc>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d114      	bne.n	8000f1e <fsm_simple_buttons_run+0x316>
				setTimer3(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f000 f9d4 	bl	80012a4 <setTimer3>
				if(counter != 0){
 8000efc:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <fsm_simple_buttons_run+0x306>
					counter--;
 8000f04:	4b31      	ldr	r3, [pc, #196]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f0c:	6013      	str	r3, [r2, #0]
				}
				display7SEG(counter);
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fad6 	bl	80004c4 <display7SEG>
				status = COUNT_DOWN;
 8000f18:	4b2d      	ldr	r3, [pc, #180]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
			}


			if(isButton_INC_Pressed() == 1){
 8000f1e:	f7ff f927 	bl	8000170 <isButton_INC_Pressed>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d106      	bne.n	8000f36 <fsm_simple_buttons_run+0x32e>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f28:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f2c:	f000 f9ba 	bl	80012a4 <setTimer3>
				status = reset;
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
			}
			if(isButton_DEC_Pressed() == 1){
 8000f36:	f7ff f92d 	bl	8000194 <isButton_DEC_Pressed>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d10b      	bne.n	8000f58 <fsm_simple_buttons_run+0x350>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f40:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f44:	f000 f9ae 	bl	80012a4 <setTimer3>
				counter --;
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f50:	6013      	str	r3, [r2, #0]
				status = DECREASE;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000f54:	2203      	movs	r2, #3
 8000f56:	601a      	str	r2, [r3, #0]
			}
			if(isButton_RESET_Pressed() == 1){
 8000f58:	f7ff f8f8 	bl	800014c <isButton_RESET_Pressed>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d106      	bne.n	8000f70 <fsm_simple_buttons_run+0x368>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f62:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f66:	f000 f99d 	bl	80012a4 <setTimer3>
				status = reset;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
			}

			// chuyển sang trạng thái nhấn đè 3s
			if(isButton_DEC_LongPressed() == 1){
 8000f70:	f7ff f934 	bl	80001dc <isButton_DEC_LongPressed>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10b      	bne.n	8000f92 <fsm_simple_buttons_run+0x38a>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f7a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f7e:	f000 f991 	bl	80012a4 <setTimer3>
				counter--;
 8000f82:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000f8a:	6013      	str	r3, [r2, #0]
				status = LONG_DEC;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000f8e:	220a      	movs	r2, #10
 8000f90:	601a      	str	r2, [r3, #0]
			}
			if(isButton_INC_LongPressed() == 1){
 8000f92:	f7ff f911 	bl	80001b8 <isButton_INC_LongPressed>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d114      	bne.n	8000fc6 <fsm_simple_buttons_run+0x3be>
				setTimer3(10000);// set thời gian đếm ngược cho khoảng thời gian không bấm nút
 8000f9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fa0:	f000 f980 	bl	80012a4 <setTimer3>
				counter++;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	4a08      	ldr	r2, [pc, #32]	; (8000fcc <fsm_simple_buttons_run+0x3c4>)
 8000fac:	6013      	str	r3, [r2, #0]
				status = LONG_INC;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <fsm_simple_buttons_run+0x3c8>)
 8000fb0:	220b      	movs	r2, #11
 8000fb2:	601a      	str	r2, [r3, #0]
			}
			break;
 8000fb4:	e007      	b.n	8000fc6 <fsm_simple_buttons_run+0x3be>
		default:
			break;
 8000fb6:	bf00      	nop
 8000fb8:	e006      	b.n	8000fc8 <fsm_simple_buttons_run+0x3c0>
			break;
 8000fba:	bf00      	nop
 8000fbc:	e004      	b.n	8000fc8 <fsm_simple_buttons_run+0x3c0>
			break;
 8000fbe:	bf00      	nop
 8000fc0:	e002      	b.n	8000fc8 <fsm_simple_buttons_run+0x3c0>
			break;
 8000fc2:	bf00      	nop
 8000fc4:	e000      	b.n	8000fc8 <fsm_simple_buttons_run+0x3c0>
			break;
 8000fc6:	bf00      	nop

	}
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000078 	.word	0x20000078
 8000fd0:	20000074 	.word	0x20000074
 8000fd4:	20000090 	.word	0x20000090

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f000 fa74 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe0:	f000 f82e 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe4:	f000 f8b4 	bl	8001150 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fe8:	f000 f866 	bl	80010b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <main+0x58>)
 8000fee:	f001 f9d5 	bl	800239c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <main+0x5c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
  setTimer1(1000);// timer for debugging by led red
 8000ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ffc:	f000 f91a 	bl	8001234 <setTimer1>
  setTimer2(1000);// timer countDown to update counter while press and hold
 8001000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001004:	f000 f932 	bl	800126c <setTimer2>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer1_flag == 1)// use LED-RED for debug
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <main+0x60>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d107      	bne.n	8001020 <main+0x48>
	  {
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001010:	2120      	movs	r1, #32
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <main+0x64>)
 8001014:	f000 fd71 	bl	8001afa <HAL_GPIO_TogglePin>
			setTimer1(1000);
 8001018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800101c:	f000 f90a 	bl	8001234 <setTimer1>
	  }
	  fsm_simple_buttons_run();
 8001020:	f7ff fdf2 	bl	8000c08 <fsm_simple_buttons_run>
	  fsm_long_press_run();
 8001024:	f7ff fc94 	bl	8000950 <fsm_long_press_run>
	  fsm_count_down_run();
 8001028:	f7ff fbd2 	bl	80007d0 <fsm_count_down_run>
  {
 800102c:	e7ec      	b.n	8001008 <main+0x30>
 800102e:	bf00      	nop
 8001030:	20000094 	.word	0x20000094
 8001034:	20000074 	.word	0x20000074
 8001038:	20000080 	.word	0x20000080
 800103c:	40010800 	.word	0x40010800

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b090      	sub	sp, #64	; 0x40
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2228      	movs	r2, #40	; 0x28
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fd5c 	bl	8002b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800106a:	2310      	movs	r3, #16
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fd58 	bl	8001b2c <HAL_RCC_OscConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001082:	f000 f8d1 	bl	8001228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	230f      	movs	r3, #15
 8001088:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 ffc4 	bl	800202c <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010aa:	f000 f8bd 	bl	8001228 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3740      	adds	r7, #64	; 0x40
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM2_Init+0x94>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_TIM2_Init+0x94>)
 80010de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_TIM2_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM2_Init+0x94>)
 80010ec:	2209      	movs	r2, #9
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_TIM2_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_TIM2_Init+0x94>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4813      	ldr	r0, [pc, #76]	; (800114c <MX_TIM2_Init+0x94>)
 80010fe:	f001 f8fd 	bl	80022fc <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001108:	f000 f88e 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_TIM2_Init+0x94>)
 800111a:	f001 fa93 	bl	8002644 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 f880 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_TIM2_Init+0x94>)
 8001136:	f001 fc5b 	bl	80029f0 <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001140:	f000 f872 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000094 	.word	0x20000094

08001150 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_GPIO_Init+0xb4>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <MX_GPIO_Init+0xb4>)
 800116a:	f043 0304 	orr.w	r3, r3, #4
 800116e:	6193      	str	r3, [r2, #24]
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <MX_GPIO_Init+0xb4>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_GPIO_Init+0xb4>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a20      	ldr	r2, [pc, #128]	; (8001204 <MX_GPIO_Init+0xb4>)
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_GPIO_Init+0xb4>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0308 	and.w	r3, r3, #8
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	481b      	ldr	r0, [pc, #108]	; (8001208 <MX_GPIO_Init+0xb8>)
 800119a:	f000 fc96 	bl	8001aca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 800119e:	2200      	movs	r2, #0
 80011a0:	21ff      	movs	r1, #255	; 0xff
 80011a2:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_GPIO_Init+0xbc>)
 80011a4:	f000 fc91 	bl	8001aca <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80011a8:	2320      	movs	r3, #32
 80011aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	4619      	mov	r1, r3
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011c0:	f000 faf2 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin SEG7_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 80011c4:	23ff      	movs	r3, #255	; 0xff
 80011c6:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|SEG7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xbc>)
 80011dc:	f000 fae4 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|INC_Pin|DEC_Pin;
 80011e0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xb8>)
 80011f6:	f000 fad7 	bl	80017a8 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800
 800120c:	40010c00 	.word	0x40010c00

08001210 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	timeRun();
 8001218:	f000 f860 	bl	80012dc <timeRun>
	getKeyInput();
 800121c:	f7fe fff0 	bl	8000200 <getKeyInput>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <setTimer1>:

int timer3_counter = 0;
int timer3_flag = 0;

void setTimer1(int duration)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <setTimer1+0x2c>)
 8001240:	fb82 1203 	smull	r1, r2, r2, r3
 8001244:	1092      	asrs	r2, r2, #2
 8001246:	17db      	asrs	r3, r3, #31
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <setTimer1+0x30>)
 800124c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <setTimer1+0x34>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	66666667 	.word	0x66666667
 8001264:	2000007c 	.word	0x2000007c
 8001268:	20000080 	.word	0x20000080

0800126c <setTimer2>:

void setTimer2(int duration)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <setTimer2+0x2c>)
 8001278:	fb82 1203 	smull	r1, r2, r2, r3
 800127c:	1092      	asrs	r2, r2, #2
 800127e:	17db      	asrs	r3, r3, #31
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <setTimer2+0x30>)
 8001284:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <setTimer2+0x34>)
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	66666667 	.word	0x66666667
 800129c:	20000084 	.word	0x20000084
 80012a0:	20000088 	.word	0x20000088

080012a4 <setTimer3>:

void setTimer3(int duration)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <setTimer3+0x2c>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1092      	asrs	r2, r2, #2
 80012b6:	17db      	asrs	r3, r3, #31
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <setTimer3+0x30>)
 80012bc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <setTimer3+0x34>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	66666667 	.word	0x66666667
 80012d4:	2000008c 	.word	0x2000008c
 80012d8:	20000090 	.word	0x20000090

080012dc <timeRun>:

void timeRun()
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <timeRun+0x6c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	dd04      	ble.n	80012f2 <timeRun+0x16>
	{
		timer1_counter--;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <timeRun+0x6c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4a16      	ldr	r2, [pc, #88]	; (8001348 <timeRun+0x6c>)
 80012f0:	6013      	str	r3, [r2, #0]
	}
	if(timer1_counter <= 0)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <timeRun+0x6c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc02      	bgt.n	8001300 <timeRun+0x24>
	{
		timer1_flag = 1;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <timeRun+0x70>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	601a      	str	r2, [r3, #0]
	}


	if(timer2_counter > 0)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <timeRun+0x74>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd04      	ble.n	8001312 <timeRun+0x36>
	{
		timer2_counter--;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <timeRun+0x74>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a10      	ldr	r2, [pc, #64]	; (8001350 <timeRun+0x74>)
 8001310:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter <= 0)
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <timeRun+0x74>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	dc02      	bgt.n	8001320 <timeRun+0x44>
	{
		timer2_flag = 1;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <timeRun+0x78>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
	}

	if(timer3_counter > 0)
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <timeRun+0x7c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	dd04      	ble.n	8001332 <timeRun+0x56>
	{
		timer3_counter--;
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <timeRun+0x7c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	3b01      	subs	r3, #1
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <timeRun+0x7c>)
 8001330:	6013      	str	r3, [r2, #0]
	}
	if(timer3_counter <= 0)
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <timeRun+0x7c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	dc02      	bgt.n	8001340 <timeRun+0x64>
	{
		timer3_flag = 1;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <timeRun+0x80>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
	}

}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	2000007c 	.word	0x2000007c
 800134c:	20000080 	.word	0x20000080
 8001350:	20000084 	.word	0x20000084
 8001354:	20000088 	.word	0x20000088
 8001358:	2000008c 	.word	0x2000008c
 800135c:	20000090 	.word	0x20000090

08001360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_MspInit+0x5c>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x5c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <HAL_MspInit+0x5c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x5c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_MspInit+0x60>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_MspInit+0x60>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010000 	.word	0x40010000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d4:	d113      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	61d3      	str	r3, [r2, #28]
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	201c      	movs	r0, #28
 80013f4:	f000 f9a1 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f8:	201c      	movs	r0, #28
 80013fa:	f000 f9ba 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 f87f 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <TIM2_IRQHandler+0x10>)
 8001462:	f000 ffe7 	bl	8002434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000094 	.word	0x20000094

08001470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff ffe5 	bl	8001470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f001 fb0d 	bl	8002ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014aa:	f7ff fd95 	bl	8000fd8 <main>
  bx lr
 80014ae:	4770      	bx	lr
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80014b8:	08002b5c 	.word	0x08002b5c
  ldr r2, =_sbss
 80014bc:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80014c0:	200000e0 	.word	0x200000e0

080014c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC1_2_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f923 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff ff3c 	bl	8001360 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f93b 	bl	800178e <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f903 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000034 	.word	0x20000034
 800154c:	2000003c 	.word	0x2000003c
 8001550:	20000038 	.word	0x20000038

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x1c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_IncTick+0x20>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a03      	ldr	r2, [pc, #12]	; (8001574 <HAL_IncTick+0x20>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	2000003c 	.word	0x2000003c
 8001574:	200000dc 	.word	0x200000dc

08001578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return uwTick;
 800157c:	4b02      	ldr	r3, [pc, #8]	; (8001588 <HAL_GetTick+0x10>)
 800157e:	681b      	ldr	r3, [r3, #0]
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	200000dc 	.word	0x200000dc

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4906      	ldr	r1, [pc, #24]	; (8001624 <__NVIC_EnableIRQ+0x34>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff90 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff2d 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff42 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff35 	bl	80015f0 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e148      	b.n	8001a4e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8137 	bne.w	8001a48 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4aa3      	ldr	r2, [pc, #652]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4aa1      	ldr	r2, [pc, #644]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4aa1      	ldr	r2, [pc, #644]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a9f      	ldr	r2, [pc, #636]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a9f      	ldr	r2, [pc, #636]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a9d      	ldr	r2, [pc, #628]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a9d      	ldr	r2, [pc, #628]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a9b      	ldr	r2, [pc, #620]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a9b      	ldr	r2, [pc, #620]	; (8001a7c <HAL_GPIO_Init+0x2d4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a99      	ldr	r2, [pc, #612]	; (8001a7c <HAL_GPIO_Init+0x2d4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a82      	ldr	r2, [pc, #520]	; (8001a80 <HAL_GPIO_Init+0x2d8>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8090 	beq.w	8001a48 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a55      	ldr	r2, [pc, #340]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_GPIO_Init+0x2dc>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <HAL_GPIO_Init+0x2e0>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a49      	ldr	r2, [pc, #292]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a47      	ldr	r2, [pc, #284]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1d8>
 800197c:	2302      	movs	r3, #2
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001980:	2303      	movs	r3, #3
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1e2>
 8001988:	2300      	movs	r3, #0
 800198a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800199a:	493b      	ldr	r1, [pc, #236]	; (8001a88 <HAL_GPIO_Init+0x2e0>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4933      	ldr	r1, [pc, #204]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b2e      	ldr	r3, [pc, #184]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	492d      	ldr	r1, [pc, #180]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	4929      	ldr	r1, [pc, #164]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a04:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	4923      	ldr	r1, [pc, #140]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	608b      	str	r3, [r1, #8]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a12:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	491f      	ldr	r1, [pc, #124]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	4919      	ldr	r1, [pc, #100]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4915      	ldr	r1, [pc, #84]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f47f aeaf 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	372c      	adds	r7, #44	; 0x2c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10310000 	.word	0x10310000
 8001a74:	10220000 	.word	0x10220000
 8001a78:	10210000 	.word	0x10210000
 8001a7c:	10120000 	.word	0x10120000
 8001a80:	10110000 	.word	0x10110000
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010800 	.word	0x40010800
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40011000 	.word	0x40011000
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	887b      	ldrh	r3, [r7, #2]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae0:	887a      	ldrh	r2, [r7, #2]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	041a      	lsls	r2, r3, #16
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	400b      	ands	r3, r1
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	611a      	str	r2, [r3, #16]
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e26c      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 8087 	beq.w	8001c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4c:	4b92      	ldr	r3, [pc, #584]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d00c      	beq.n	8001b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b58:	4b8f      	ldr	r3, [pc, #572]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d112      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
 8001b64:	4b8c      	ldr	r3, [pc, #560]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b70:	d10b      	bne.n	8001b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b72:	4b89      	ldr	r3, [pc, #548]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d06c      	beq.n	8001c58 <HAL_RCC_OscConfig+0x12c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d168      	bne.n	8001c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e246      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x76>
 8001b94:	4b80      	ldr	r3, [pc, #512]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a7f      	ldr	r2, [pc, #508]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e02e      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b7b      	ldr	r3, [pc, #492]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a7a      	ldr	r2, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b78      	ldr	r3, [pc, #480]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a77      	ldr	r2, [pc, #476]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xbc>
 8001bce:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a71      	ldr	r2, [pc, #452]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b6f      	ldr	r3, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6e      	ldr	r2, [pc, #440]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xd4>
 8001be8:	4b6b      	ldr	r3, [pc, #428]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6a      	ldr	r2, [pc, #424]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a67      	ldr	r2, [pc, #412]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcb6 	bl	8001578 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fcb2 	bl	8001578 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1fa      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xe4>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fca2 	bl	8001578 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff fc9e 	bl	8001578 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e1e6      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b53      	ldr	r3, [pc, #332]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x10c>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d063      	beq.n	8001d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c66:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c72:	4b49      	ldr	r3, [pc, #292]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d11c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
 8001c7e:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d116      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d005      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e1ba      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4939      	ldr	r1, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb6:	e03a      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fc57 	bl	8001578 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cce:	f7ff fc53 	bl	8001578 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e19b      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4927      	ldr	r1, [pc, #156]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e015      	b.n	8001d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x270>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fc36 	bl	8001578 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fc32 	bl	8001578 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e17a      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d03a      	beq.n	8001db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d48:	f7ff fc16 	bl	8001578 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d50:	f7ff fc12 	bl	8001578 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e15a      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 faa6 	bl	80022c0 <RCC_Delay>
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_RCC_OscConfig+0x274>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fbfc 	bl	8001578 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d82:	e00f      	b.n	8001da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff fbf8 	bl	8001578 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d908      	bls.n	8001da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e140      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	42420000 	.word	0x42420000
 8001da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	4b9e      	ldr	r3, [pc, #632]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e9      	bne.n	8001d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a6 	beq.w	8001f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b97      	ldr	r3, [pc, #604]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10d      	bne.n	8001dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b94      	ldr	r3, [pc, #592]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	4a93      	ldr	r2, [pc, #588]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	61d3      	str	r3, [r2, #28]
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de6:	2301      	movs	r3, #1
 8001de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d118      	bne.n	8001e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a8a      	ldr	r2, [pc, #552]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e02:	f7ff fbb9 	bl	8001578 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0a:	f7ff fbb5 	bl	8001578 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b64      	cmp	r3, #100	; 0x64
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e0fd      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	4b81      	ldr	r3, [pc, #516]	; (8002024 <HAL_RCC_OscConfig+0x4f8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x312>
 8001e30:	4b7b      	ldr	r3, [pc, #492]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a7a      	ldr	r2, [pc, #488]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e02d      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d10c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e46:	4b76      	ldr	r3, [pc, #472]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a75      	ldr	r2, [pc, #468]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	f023 0301 	bic.w	r3, r3, #1
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a72      	ldr	r2, [pc, #456]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 0304 	bic.w	r3, r3, #4
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	e01c      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d10c      	bne.n	8001e82 <HAL_RCC_OscConfig+0x356>
 8001e68:	4b6d      	ldr	r3, [pc, #436]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6c      	ldr	r2, [pc, #432]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	f043 0304 	orr.w	r3, r3, #4
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	e00b      	b.n	8001e9a <HAL_RCC_OscConfig+0x36e>
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a66      	ldr	r2, [pc, #408]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	4b64      	ldr	r3, [pc, #400]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	4a63      	ldr	r2, [pc, #396]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d015      	beq.n	8001ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb69 	bl	8001578 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7ff fb65 	bl	8001578 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0ab      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCC_OscConfig+0x37e>
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb53 	bl	8001578 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff fb4f 	bl	8001578 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e095      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eec:	4b4c      	ldr	r3, [pc, #304]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1ee      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d105      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efe:	4b48      	ldr	r3, [pc, #288]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	4a47      	ldr	r2, [pc, #284]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8081 	beq.w	8002016 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f14:	4b42      	ldr	r3, [pc, #264]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d061      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d146      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb23 	bl	8001578 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb1f 	bl	8001578 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e067      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	4b35      	ldr	r3, [pc, #212]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f5c:	d108      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	492d      	ldr	r1, [pc, #180]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f70:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a19      	ldr	r1, [r3, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	430b      	orrs	r3, r1
 8001f82:	4927      	ldr	r1, [pc, #156]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8e:	f7ff faf3 	bl	8001578 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7ff faef 	bl	8001578 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e037      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46a>
 8001fb4:	e02f      	b.n	8002016 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_RCC_OscConfig+0x4fc>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fadc 	bl	8001578 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc4:	f7ff fad8 	bl	8001578 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e020      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x498>
 8001fe2:	e018      	b.n	8002016 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e013      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
 8002028:	42420060 	.word	0x42420060

0800202c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0d0      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b6a      	ldr	r3, [pc, #424]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d910      	bls.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0207 	bic.w	r2, r3, #7
 8002056:	4965      	ldr	r1, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d040      	beq.n	800214c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d115      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b41      	ldr	r3, [pc, #260]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e073      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e06b      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4936      	ldr	r1, [pc, #216]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	4313      	orrs	r3, r2
 800211a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7ff fa2c 	bl	8001578 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff fa28 	bl	8001578 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e053      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d210      	bcs.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 0207 	bic.w	r2, r3, #7
 8002162:	4922      	ldr	r1, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4313      	orrs	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1cc>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1d0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f98a 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08002b44 	.word	0x08002b44
 80021f8:	20000034 	.word	0x20000034
 80021fc:	20000038 	.word	0x20000038

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b490      	push	{r4, r7}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002208:	1d3c      	adds	r4, r7, #4
 800220a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800220c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002210:	f240 2301 	movw	r3, #513	; 0x201
 8002214:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b04      	cmp	r3, #4
 8002238:	d002      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 800223a:	2b08      	cmp	r3, #8
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x46>
 800223e:	e02d      	b.n	800229c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002242:	623b      	str	r3, [r7, #32]
      break;
 8002244:	e02d      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	0c9b      	lsrs	r3, r3, #18
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002252:	4413      	add	r3, r2
 8002254:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002258:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	0c5b      	lsrs	r3, r3, #17
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002272:	4413      	add	r3, r2
 8002274:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002278:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	fb02 f203 	mul.w	r2, r2, r3
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	fbb2 f3f3 	udiv	r3, r2, r3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
 800228a:	e004      	b.n	8002296 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002290:	fb02 f303 	mul.w	r3, r2, r3
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	623b      	str	r3, [r7, #32]
      break;
 800229a:	e002      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229e:	623b      	str	r3, [r7, #32]
      break;
 80022a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a2:	6a3b      	ldr	r3, [r7, #32]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3728      	adds	r7, #40	; 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc90      	pop	{r4, r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	08002b34 	.word	0x08002b34
 80022b4:	40021000 	.word	0x40021000
 80022b8:	007a1200 	.word	0x007a1200
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <RCC_Delay+0x34>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <RCC_Delay+0x38>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0a5b      	lsrs	r3, r3, #9
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022dc:	bf00      	nop
  }
  while (Delay --);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1e5a      	subs	r2, r3, #1
 80022e2:	60fa      	str	r2, [r7, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f9      	bne.n	80022dc <RCC_Delay+0x1c>
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000034 	.word	0x20000034
 80022f8:	10624dd3 	.word	0x10624dd3

080022fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e041      	b.n	8002392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff f84e 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3304      	adds	r3, #4
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 fa6a 	bl	8002814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e035      	b.n	8002420 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_TIM_Base_Start_IT+0x90>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d009      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x4e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d004      	beq.n	80023ea <HAL_TIM_Base_Start_IT+0x4e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <HAL_TIM_Base_Start_IT+0x94>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d111      	bne.n	800240e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b06      	cmp	r3, #6
 80023fa:	d010      	beq.n	800241e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f042 0201 	orr.w	r2, r2, #1
 800240a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	e007      	b.n	800241e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40012c00 	.word	0x40012c00
 8002430:	40000400 	.word	0x40000400

08002434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0202 	mvn.w	r2, #2
 8002460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f9b1 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f9a4 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f9b3 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d122      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d11b      	bne.n	80024e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0204 	mvn.w	r2, #4
 80024b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f987 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 80024d0:	e005      	b.n	80024de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f97a 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f989 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d122      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d11b      	bne.n	8002538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f06f 0208 	mvn.w	r2, #8
 8002508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2204      	movs	r2, #4
 800250e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f95d 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 8002524:	e005      	b.n	8002532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f950 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f95f 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b10      	cmp	r3, #16
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0210 	mvn.w	r2, #16
 800255c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2208      	movs	r2, #8
 8002562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f933 	bl	80027de <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f926 	bl	80027cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f935 	bl	80027f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0201 	mvn.w	r2, #1
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fe2c 	bl	8001210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	2b80      	cmp	r3, #128	; 0x80
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fa67 	bl	8002ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8f9 	bl	8002802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0320 	and.w	r3, r3, #32
 800261a:	2b20      	cmp	r3, #32
 800261c:	d10e      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b20      	cmp	r3, #32
 800262a:	d107      	bne.n	800263c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0220 	mvn.w	r2, #32
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa32 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_TIM_ConfigClockSource+0x18>
 8002658:	2302      	movs	r3, #2
 800265a:	e0b3      	b.n	80027c4 <HAL_TIM_ConfigClockSource+0x180>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800267a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002694:	d03e      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0xd0>
 8002696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800269a:	f200 8087 	bhi.w	80027ac <HAL_TIM_ConfigClockSource+0x168>
 800269e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a2:	f000 8085 	beq.w	80027b0 <HAL_TIM_ConfigClockSource+0x16c>
 80026a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026aa:	d87f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026ac:	2b70      	cmp	r3, #112	; 0x70
 80026ae:	d01a      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0xa2>
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d87b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026b4:	2b60      	cmp	r3, #96	; 0x60
 80026b6:	d050      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x116>
 80026b8:	2b60      	cmp	r3, #96	; 0x60
 80026ba:	d877      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026bc:	2b50      	cmp	r3, #80	; 0x50
 80026be:	d03c      	beq.n	800273a <HAL_TIM_ConfigClockSource+0xf6>
 80026c0:	2b50      	cmp	r3, #80	; 0x50
 80026c2:	d873      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	d058      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x136>
 80026c8:	2b40      	cmp	r3, #64	; 0x40
 80026ca:	d86f      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026cc:	2b30      	cmp	r3, #48	; 0x30
 80026ce:	d064      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d86b      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d060      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026d8:	2b20      	cmp	r3, #32
 80026da:	d867      	bhi.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d05c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d05a      	beq.n	800279a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026e4:	e062      	b.n	80027ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f000 f95c 	bl	80029b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	609a      	str	r2, [r3, #8]
      break;
 8002712:	e04e      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6899      	ldr	r1, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f000 f945 	bl	80029b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002736:	609a      	str	r2, [r3, #8]
      break;
 8002738:	e03b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6859      	ldr	r1, [r3, #4]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	461a      	mov	r2, r3
 8002748:	f000 f8bc 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2150      	movs	r1, #80	; 0x50
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f913 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002758:	e02b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	f000 f8da 	bl	8002920 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2160      	movs	r1, #96	; 0x60
 8002772:	4618      	mov	r0, r3
 8002774:	f000 f903 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002778:	e01b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	f000 f89c 	bl	80028c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2140      	movs	r1, #64	; 0x40
 8002792:	4618      	mov	r0, r3
 8002794:	f000 f8f3 	bl	800297e <TIM_ITRx_SetConfig>
      break;
 8002798:	e00b      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f000 f8ea 	bl	800297e <TIM_ITRx_SetConfig>
        break;
 80027aa:	e002      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027ac:	bf00      	nop
 80027ae:	e000      	b.n	80027b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d007      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002832:	d003      	beq.n	800283c <TIM_Base_SetConfig+0x28>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d108      	bne.n	800284e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d003      	beq.n	8002866 <TIM_Base_SetConfig+0x52>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a17      	ldr	r2, [pc, #92]	; (80028c0 <TIM_Base_SetConfig+0xac>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d108      	bne.n	8002878 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a07      	ldr	r2, [pc, #28]	; (80028bc <TIM_Base_SetConfig+0xa8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400

080028c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0201 	bic.w	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f023 030a 	bic.w	r3, r3, #10
 8002900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	621a      	str	r2, [r3, #32]
}
 8002916:	bf00      	nop
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	f023 0210 	bic.w	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800294a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	031b      	lsls	r3, r3, #12
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800295c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	f043 0307 	orr.w	r3, r3, #7
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b087      	sub	sp, #28
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	021a      	lsls	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	4313      	orrs	r3, r2
 80029de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	609a      	str	r2, [r3, #8]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e041      	b.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d004      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10c      	bne.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00
 8002a9c:	40000400 	.word	0x40000400

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <__libc_init_array>:
 8002ac4:	b570      	push	{r4, r5, r6, lr}
 8002ac6:	2600      	movs	r6, #0
 8002ac8:	4d0c      	ldr	r5, [pc, #48]	; (8002afc <__libc_init_array+0x38>)
 8002aca:	4c0d      	ldr	r4, [pc, #52]	; (8002b00 <__libc_init_array+0x3c>)
 8002acc:	1b64      	subs	r4, r4, r5
 8002ace:	10a4      	asrs	r4, r4, #2
 8002ad0:	42a6      	cmp	r6, r4
 8002ad2:	d109      	bne.n	8002ae8 <__libc_init_array+0x24>
 8002ad4:	f000 f822 	bl	8002b1c <_init>
 8002ad8:	2600      	movs	r6, #0
 8002ada:	4d0a      	ldr	r5, [pc, #40]	; (8002b04 <__libc_init_array+0x40>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	; (8002b08 <__libc_init_array+0x44>)
 8002ade:	1b64      	subs	r4, r4, r5
 8002ae0:	10a4      	asrs	r4, r4, #2
 8002ae2:	42a6      	cmp	r6, r4
 8002ae4:	d105      	bne.n	8002af2 <__libc_init_array+0x2e>
 8002ae6:	bd70      	pop	{r4, r5, r6, pc}
 8002ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aec:	4798      	blx	r3
 8002aee:	3601      	adds	r6, #1
 8002af0:	e7ee      	b.n	8002ad0 <__libc_init_array+0xc>
 8002af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af6:	4798      	blx	r3
 8002af8:	3601      	adds	r6, #1
 8002afa:	e7f2      	b.n	8002ae2 <__libc_init_array+0x1e>
 8002afc:	08002b54 	.word	0x08002b54
 8002b00:	08002b54 	.word	0x08002b54
 8002b04:	08002b54 	.word	0x08002b54
 8002b08:	08002b58 	.word	0x08002b58

08002b0c <memset>:
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4402      	add	r2, r0
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <_init>:
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1e:	bf00      	nop
 8002b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b22:	bc08      	pop	{r3}
 8002b24:	469e      	mov	lr, r3
 8002b26:	4770      	bx	lr

08002b28 <_fini>:
 8002b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2a:	bf00      	nop
 8002b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b2e:	bc08      	pop	{r3}
 8002b30:	469e      	mov	lr, r3
 8002b32:	4770      	bx	lr
